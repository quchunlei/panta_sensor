// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Proto_msg.LidarPoints.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Proto_msg.LidarPoints.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Proto_msg {

namespace {

const ::google::protobuf::Descriptor* LidarPoints_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LidarPoints_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_Proto_5fmsg_2eLidarPoints_2eproto() {
  protobuf_AddDesc_Proto_5fmsg_2eLidarPoints_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Proto_msg.LidarPoints.proto");
  GOOGLE_CHECK(file != NULL);
  LidarPoints_descriptor_ = file->message_type(0);
  static const int LidarPoints_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LidarPoints, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LidarPoints, seq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LidarPoints, parent_frame_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LidarPoints, frame_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LidarPoints, motion_correct_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LidarPoints, height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LidarPoints, width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LidarPoints, is_dense_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LidarPoints, is_transform_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LidarPoints, lidar_model_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LidarPoints, points_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LidarPoints, data_),
  };
  LidarPoints_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LidarPoints_descriptor_,
      LidarPoints::default_instance_,
      LidarPoints_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LidarPoints, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LidarPoints, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LidarPoints));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Proto_5fmsg_2eLidarPoints_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LidarPoints_descriptor_, &LidarPoints::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Proto_5fmsg_2eLidarPoints_2eproto() {
  delete LidarPoints::default_instance_;
  delete LidarPoints_reflection_;
}

void protobuf_AddDesc_Proto_5fmsg_2eLidarPoints_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\033Proto_msg.LidarPoints.proto\022\tProto_msg"
    "\"\357\001\n\013LidarPoints\022\021\n\ttimestamp\030\001 \001(\001\022\013\n\003s"
    "eq\030\002 \001(\r\022\027\n\017parent_frame_id\030\003 \001(\t\022\020\n\010fra"
    "me_id\030\004 \001(\t\022\026\n\016motion_correct\030\005 \001(\010\022\016\n\006h"
    "eight\030\006 \001(\r\022\r\n\005width\030\007 \001(\r\022\020\n\010is_dense\030\010"
    " \001(\010\022\024\n\014is_transform\030\t \001(\010\022\023\n\013lidar_mode"
    "l\030\n \001(\t\022\023\n\013points_type\030\013 \001(\t\022\014\n\004data\030\014 \003"
    "(\002", 282);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Proto_msg.LidarPoints.proto", &protobuf_RegisterTypes);
  LidarPoints::default_instance_ = new LidarPoints();
  LidarPoints::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Proto_5fmsg_2eLidarPoints_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Proto_5fmsg_2eLidarPoints_2eproto {
  StaticDescriptorInitializer_Proto_5fmsg_2eLidarPoints_2eproto() {
    protobuf_AddDesc_Proto_5fmsg_2eLidarPoints_2eproto();
  }
} static_descriptor_initializer_Proto_5fmsg_2eLidarPoints_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int LidarPoints::kTimestampFieldNumber;
const int LidarPoints::kSeqFieldNumber;
const int LidarPoints::kParentFrameIdFieldNumber;
const int LidarPoints::kFrameIdFieldNumber;
const int LidarPoints::kMotionCorrectFieldNumber;
const int LidarPoints::kHeightFieldNumber;
const int LidarPoints::kWidthFieldNumber;
const int LidarPoints::kIsDenseFieldNumber;
const int LidarPoints::kIsTransformFieldNumber;
const int LidarPoints::kLidarModelFieldNumber;
const int LidarPoints::kPointsTypeFieldNumber;
const int LidarPoints::kDataFieldNumber;
#endif  // !_MSC_VER

LidarPoints::LidarPoints()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Proto_msg.LidarPoints)
}

void LidarPoints::InitAsDefaultInstance() {
}

LidarPoints::LidarPoints(const LidarPoints& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Proto_msg.LidarPoints)
}

void LidarPoints::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  timestamp_ = 0;
  seq_ = 0u;
  parent_frame_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  frame_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  motion_correct_ = false;
  height_ = 0u;
  width_ = 0u;
  is_dense_ = false;
  is_transform_ = false;
  lidar_model_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  points_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LidarPoints::~LidarPoints() {
  // @@protoc_insertion_point(destructor:Proto_msg.LidarPoints)
  SharedDtor();
}

void LidarPoints::SharedDtor() {
  if (parent_frame_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete parent_frame_id_;
  }
  if (frame_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete frame_id_;
  }
  if (lidar_model_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete lidar_model_;
  }
  if (points_type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete points_type_;
  }
  if (this != default_instance_) {
  }
}

void LidarPoints::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LidarPoints::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LidarPoints_descriptor_;
}

const LidarPoints& LidarPoints::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Proto_5fmsg_2eLidarPoints_2eproto();
  return *default_instance_;
}

LidarPoints* LidarPoints::default_instance_ = NULL;

LidarPoints* LidarPoints::New() const {
  return new LidarPoints;
}

void LidarPoints::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<LidarPoints*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(seq_, is_dense_);
    timestamp_ = 0;
    if (has_parent_frame_id()) {
      if (parent_frame_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        parent_frame_id_->clear();
      }
    }
    if (has_frame_id()) {
      if (frame_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        frame_id_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 1792) {
    is_transform_ = false;
    if (has_lidar_model()) {
      if (lidar_model_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        lidar_model_->clear();
      }
    }
    if (has_points_type()) {
      if (points_type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        points_type_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LidarPoints::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Proto_msg.LidarPoints)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double timestamp = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_seq;
        break;
      }

      // optional uint32 seq = 2;
      case 2: {
        if (tag == 16) {
         parse_seq:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seq_)));
          set_has_seq();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_parent_frame_id;
        break;
      }

      // optional string parent_frame_id = 3;
      case 3: {
        if (tag == 26) {
         parse_parent_frame_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_parent_frame_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->parent_frame_id().data(), this->parent_frame_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "parent_frame_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_frame_id;
        break;
      }

      // optional string frame_id = 4;
      case 4: {
        if (tag == 34) {
         parse_frame_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_frame_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->frame_id().data(), this->frame_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "frame_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_motion_correct;
        break;
      }

      // optional bool motion_correct = 5;
      case 5: {
        if (tag == 40) {
         parse_motion_correct:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &motion_correct_)));
          set_has_motion_correct();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_height;
        break;
      }

      // optional uint32 height = 6;
      case 6: {
        if (tag == 48) {
         parse_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &height_)));
          set_has_height();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_width;
        break;
      }

      // optional uint32 width = 7;
      case 7: {
        if (tag == 56) {
         parse_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &width_)));
          set_has_width();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_is_dense;
        break;
      }

      // optional bool is_dense = 8;
      case 8: {
        if (tag == 64) {
         parse_is_dense:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_dense_)));
          set_has_is_dense();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_is_transform;
        break;
      }

      // optional bool is_transform = 9;
      case 9: {
        if (tag == 72) {
         parse_is_transform:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_transform_)));
          set_has_is_transform();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_lidar_model;
        break;
      }

      // optional string lidar_model = 10;
      case 10: {
        if (tag == 82) {
         parse_lidar_model:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lidar_model()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->lidar_model().data(), this->lidar_model().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "lidar_model");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_points_type;
        break;
      }

      // optional string points_type = 11;
      case 11: {
        if (tag == 90) {
         parse_points_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_points_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->points_type().data(), this->points_type().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "points_type");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(101)) goto parse_data;
        break;
      }

      // repeated float data = 12;
      case 12: {
        if (tag == 101) {
         parse_data:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 101, input, this->mutable_data())));
        } else if (tag == 98) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_data())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(101)) goto parse_data;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Proto_msg.LidarPoints)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Proto_msg.LidarPoints)
  return false;
#undef DO_
}

void LidarPoints::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Proto_msg.LidarPoints)
  // optional double timestamp = 1;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->timestamp(), output);
  }

  // optional uint32 seq = 2;
  if (has_seq()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->seq(), output);
  }

  // optional string parent_frame_id = 3;
  if (has_parent_frame_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->parent_frame_id().data(), this->parent_frame_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "parent_frame_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->parent_frame_id(), output);
  }

  // optional string frame_id = 4;
  if (has_frame_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->frame_id().data(), this->frame_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "frame_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->frame_id(), output);
  }

  // optional bool motion_correct = 5;
  if (has_motion_correct()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->motion_correct(), output);
  }

  // optional uint32 height = 6;
  if (has_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->height(), output);
  }

  // optional uint32 width = 7;
  if (has_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->width(), output);
  }

  // optional bool is_dense = 8;
  if (has_is_dense()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->is_dense(), output);
  }

  // optional bool is_transform = 9;
  if (has_is_transform()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->is_transform(), output);
  }

  // optional string lidar_model = 10;
  if (has_lidar_model()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->lidar_model().data(), this->lidar_model().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "lidar_model");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->lidar_model(), output);
  }

  // optional string points_type = 11;
  if (has_points_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->points_type().data(), this->points_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "points_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->points_type(), output);
  }

  // repeated float data = 12;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      12, this->data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Proto_msg.LidarPoints)
}

::google::protobuf::uint8* LidarPoints::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto_msg.LidarPoints)
  // optional double timestamp = 1;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->timestamp(), target);
  }

  // optional uint32 seq = 2;
  if (has_seq()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->seq(), target);
  }

  // optional string parent_frame_id = 3;
  if (has_parent_frame_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->parent_frame_id().data(), this->parent_frame_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "parent_frame_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->parent_frame_id(), target);
  }

  // optional string frame_id = 4;
  if (has_frame_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->frame_id().data(), this->frame_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "frame_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->frame_id(), target);
  }

  // optional bool motion_correct = 5;
  if (has_motion_correct()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->motion_correct(), target);
  }

  // optional uint32 height = 6;
  if (has_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->height(), target);
  }

  // optional uint32 width = 7;
  if (has_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->width(), target);
  }

  // optional bool is_dense = 8;
  if (has_is_dense()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->is_dense(), target);
  }

  // optional bool is_transform = 9;
  if (has_is_transform()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->is_transform(), target);
  }

  // optional string lidar_model = 10;
  if (has_lidar_model()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->lidar_model().data(), this->lidar_model().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "lidar_model");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->lidar_model(), target);
  }

  // optional string points_type = 11;
  if (has_points_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->points_type().data(), this->points_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "points_type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->points_type(), target);
  }

  // repeated float data = 12;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(12, this->data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto_msg.LidarPoints)
  return target;
}

int LidarPoints::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional double timestamp = 1;
    if (has_timestamp()) {
      total_size += 1 + 8;
    }

    // optional uint32 seq = 2;
    if (has_seq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seq());
    }

    // optional string parent_frame_id = 3;
    if (has_parent_frame_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->parent_frame_id());
    }

    // optional string frame_id = 4;
    if (has_frame_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->frame_id());
    }

    // optional bool motion_correct = 5;
    if (has_motion_correct()) {
      total_size += 1 + 1;
    }

    // optional uint32 height = 6;
    if (has_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->height());
    }

    // optional uint32 width = 7;
    if (has_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->width());
    }

    // optional bool is_dense = 8;
    if (has_is_dense()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bool is_transform = 9;
    if (has_is_transform()) {
      total_size += 1 + 1;
    }

    // optional string lidar_model = 10;
    if (has_lidar_model()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lidar_model());
    }

    // optional string points_type = 11;
    if (has_points_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->points_type());
    }

  }
  // repeated float data = 12;
  {
    int data_size = 0;
    data_size = 4 * this->data_size();
    total_size += 1 * this->data_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LidarPoints::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LidarPoints* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LidarPoints*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LidarPoints::MergeFrom(const LidarPoints& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
    if (from.has_seq()) {
      set_seq(from.seq());
    }
    if (from.has_parent_frame_id()) {
      set_parent_frame_id(from.parent_frame_id());
    }
    if (from.has_frame_id()) {
      set_frame_id(from.frame_id());
    }
    if (from.has_motion_correct()) {
      set_motion_correct(from.motion_correct());
    }
    if (from.has_height()) {
      set_height(from.height());
    }
    if (from.has_width()) {
      set_width(from.width());
    }
    if (from.has_is_dense()) {
      set_is_dense(from.is_dense());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_is_transform()) {
      set_is_transform(from.is_transform());
    }
    if (from.has_lidar_model()) {
      set_lidar_model(from.lidar_model());
    }
    if (from.has_points_type()) {
      set_points_type(from.points_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LidarPoints::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LidarPoints::CopyFrom(const LidarPoints& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LidarPoints::IsInitialized() const {

  return true;
}

void LidarPoints::Swap(LidarPoints* other) {
  if (other != this) {
    std::swap(timestamp_, other->timestamp_);
    std::swap(seq_, other->seq_);
    std::swap(parent_frame_id_, other->parent_frame_id_);
    std::swap(frame_id_, other->frame_id_);
    std::swap(motion_correct_, other->motion_correct_);
    std::swap(height_, other->height_);
    std::swap(width_, other->width_);
    std::swap(is_dense_, other->is_dense_);
    std::swap(is_transform_, other->is_transform_);
    std::swap(lidar_model_, other->lidar_model_);
    std::swap(points_type_, other->points_type_);
    data_.Swap(&other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LidarPoints::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LidarPoints_descriptor_;
  metadata.reflection = LidarPoints_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Proto_msg

// @@protoc_insertion_point(global_scope)
