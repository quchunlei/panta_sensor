// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Proto_msg.Percept.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Proto_msg.Percept.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Proto_msg {

namespace {

const ::google::protobuf::Descriptor* Point3_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Point3_reflection_ = NULL;
const ::google::protobuf::Descriptor* FreeSpace_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FreeSpace_reflection_ = NULL;
const ::google::protobuf::Descriptor* Obstacle_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Obstacle_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Obstacle_Type_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* Obstacle_MotionType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* FreeSpaces_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FreeSpaces_reflection_ = NULL;
const ::google::protobuf::Descriptor* Obstacles_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Obstacles_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_Proto_5fmsg_2ePercept_2eproto() {
  protobuf_AddDesc_Proto_5fmsg_2ePercept_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Proto_msg.Percept.proto");
  GOOGLE_CHECK(file != NULL);
  Point3_descriptor_ = file->message_type(0);
  static const int Point3_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point3, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point3, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point3, z_),
  };
  Point3_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Point3_descriptor_,
      Point3::default_instance_,
      Point3_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point3, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point3, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Point3));
  FreeSpace_descriptor_ = file->message_type(1);
  static const int FreeSpace_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FreeSpace, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FreeSpace, device_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FreeSpace, distance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FreeSpace, yaw_angle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FreeSpace, free_prob_),
  };
  FreeSpace_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FreeSpace_descriptor_,
      FreeSpace::default_instance_,
      FreeSpace_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FreeSpace, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FreeSpace, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FreeSpace));
  Obstacle_descriptor_ = file->message_type(2);
  static const int Obstacle_offsets_[36] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Obstacle, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Obstacle, device_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Obstacle, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Obstacle, anchor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Obstacle, geo_center_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Obstacle, geo_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Obstacle, geo_direction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Obstacle, polygon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Obstacle, detect_confidence_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Obstacle, nearest_point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Obstacle, left_point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Obstacle, right_point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Obstacle, distance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Obstacle, yaw_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Obstacle, point_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Obstacle, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Obstacle, type_confidence_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Obstacle, latent_types_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Obstacle, motion_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Obstacle, is_track_converged_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Obstacle, tracker_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Obstacle, velocity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Obstacle, velocity_cov_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Obstacle, velocity_uncertainty_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Obstacle, ave_velocity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Obstacle, acceleration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Obstacle, acceleration_cov_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Obstacle, acceleration_uncertainty_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Obstacle, ave_acceleration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Obstacle, angle_velocity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Obstacle, angle_velocity_cov_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Obstacle, angle_velocity_uncertainty_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Obstacle, ave_angle_velocity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Obstacle, asso_quality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Obstacle, tracker_quality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Obstacle, tracking_time_),
  };
  Obstacle_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Obstacle_descriptor_,
      Obstacle::default_instance_,
      Obstacle_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Obstacle, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Obstacle, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Obstacle));
  Obstacle_Type_descriptor_ = Obstacle_descriptor_->enum_type(0);
  Obstacle_MotionType_descriptor_ = Obstacle_descriptor_->enum_type(1);
  FreeSpaces_descriptor_ = file->message_type(3);
  static const int FreeSpaces_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FreeSpaces, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FreeSpaces, seq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FreeSpaces, parent_frame_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FreeSpaces, frame_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FreeSpaces, freespaces_),
  };
  FreeSpaces_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FreeSpaces_descriptor_,
      FreeSpaces::default_instance_,
      FreeSpaces_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FreeSpaces, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FreeSpaces, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FreeSpaces));
  Obstacles_descriptor_ = file->message_type(4);
  static const int Obstacles_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Obstacles, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Obstacles, seq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Obstacles, parent_frame_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Obstacles, frame_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Obstacles, obstacles_),
  };
  Obstacles_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Obstacles_descriptor_,
      Obstacles::default_instance_,
      Obstacles_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Obstacles, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Obstacles, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Obstacles));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Proto_5fmsg_2ePercept_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Point3_descriptor_, &Point3::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FreeSpace_descriptor_, &FreeSpace::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Obstacle_descriptor_, &Obstacle::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FreeSpaces_descriptor_, &FreeSpaces::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Obstacles_descriptor_, &Obstacles::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Proto_5fmsg_2ePercept_2eproto() {
  delete Point3::default_instance_;
  delete Point3_reflection_;
  delete FreeSpace::default_instance_;
  delete FreeSpace_reflection_;
  delete Obstacle::default_instance_;
  delete Obstacle_reflection_;
  delete FreeSpaces::default_instance_;
  delete FreeSpaces_reflection_;
  delete Obstacles::default_instance_;
  delete Obstacles_reflection_;
}

void protobuf_AddDesc_Proto_5fmsg_2ePercept_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\027Proto_msg.Percept.proto\022\tProto_msg\")\n\006"
    "Point3\022\t\n\001x\030\001 \001(\002\022\t\n\001y\030\002 \001(\002\022\t\n\001z\030\003 \001(\002\""
    "k\n\tFreeSpace\022\021\n\ttimestamp\030\001 \001(\001\022\023\n\013devic"
    "e_code\030\002 \001(\r\022\020\n\010distance\030\003 \001(\002\022\021\n\tyaw_an"
    "gle\030\004 \001(\002\022\021\n\tfree_prob\030\005 \001(\002\"\347\t\n\010Obstacl"
    "e\022\021\n\ttimestamp\030\001 \001(\001\022\023\n\013device_code\030\002 \001("
    "\r\022\n\n\002id\030\003 \001(\005\022!\n\006anchor\030\004 \001(\0132\021.Proto_ms"
    "g.Point3\022%\n\ngeo_center\030\005 \001(\0132\021.Proto_msg"
    ".Point3\022#\n\010geo_size\030\006 \001(\0132\021.Proto_msg.Po"
    "int3\022(\n\rgeo_direction\030\007 \001(\0132\021.Proto_msg."
    "Point3\022\"\n\007polygon\030\010 \003(\0132\021.Proto_msg.Poin"
    "t3\022\031\n\021detect_confidence\030\t \001(\002\022(\n\rnearest"
    "_point\030\n \001(\0132\021.Proto_msg.Point3\022%\n\nleft_"
    "point\030\013 \001(\0132\021.Proto_msg.Point3\022&\n\013right_"
    "point\030\014 \001(\0132\021.Proto_msg.Point3\022\020\n\010distan"
    "ce\030\r \001(\002\022\013\n\003yaw\030\016 \001(\002\022\021\n\tpoint_num\030\017 \001(\005"
    "\022&\n\004type\030\020 \001(\0162\030.Proto_msg.Obstacle.Type"
    "\022\027\n\017type_confidence\030\021 \001(\002\022\024\n\014latent_type"
    "s\030\022 \003(\002\0224\n\014motion_state\030\023 \001(\0162\036.Proto_ms"
    "g.Obstacle.MotionType\022\032\n\022is_track_conver"
    "ged\030\024 \001(\010\022\022\n\ntracker_id\030\025 \001(\005\022#\n\010velocit"
    "y\030\026 \001(\0132\021.Proto_msg.Point3\022\024\n\014velocity_c"
    "ov\030\027 \003(\002\022\034\n\024velocity_uncertainty\030\030 \001(\002\022\'"
    "\n\014ave_velocity\030\031 \001(\0132\021.Proto_msg.Point3\022"
    "\'\n\014acceleration\030\032 \001(\0132\021.Proto_msg.Point3"
    "\022\030\n\020acceleration_cov\030\033 \003(\002\022 \n\030accelerati"
    "on_uncertainty\030\034 \001(\002\022+\n\020ave_acceleration"
    "\030\035 \001(\0132\021.Proto_msg.Point3\022\026\n\016angle_veloc"
    "ity\030\036 \001(\002\022\032\n\022angle_velocity_cov\030\037 \001(\002\022\"\n"
    "\032angle_velocity_uncertainty\030  \001(\002\022\032\n\022ave"
    "_angle_velocity\030! \001(\002\022\024\n\014asso_quality\030\" "
    "\001(\002\022\027\n\017tracker_quality\030# \001(\002\022\025\n\rtracking"
    "_time\030$ \001(\001\"[\n\004Type\022\013\n\007UNKNOWN\020\000\022\016\n\nPEDE"
    "STRIAN\020\001\022\013\n\007BICYCLE\020\002\022\007\n\003CAR\020\003\022\r\n\tTRUCK_"
    "BUS\020\004\022\021\n\rULTRA_VEHICLE\020\005\"<\n\nMotionType\022\n"
    "\n\006UNKNOW\020\000\022\n\n\006MOVING\020\001\022\n\n\006STATIC\020\002\022\n\n\006ST"
    "OPED\020\003\"\201\001\n\nFreeSpaces\022\021\n\ttimestamp\030\001 \001(\001"
    "\022\013\n\003seq\030\002 \001(\r\022\027\n\017parent_frame_id\030\003 \001(\t\022\020"
    "\n\010frame_id\030\004 \001(\t\022(\n\nfreeSpaces\030\005 \003(\0132\024.P"
    "roto_msg.FreeSpace\"~\n\tObstacles\022\021\n\ttimes"
    "tamp\030\001 \001(\001\022\013\n\003seq\030\002 \001(\r\022\027\n\017parent_frame_"
    "id\030\003 \001(\t\022\020\n\010frame_id\030\004 \001(\t\022&\n\tobstacles\030"
    "\005 \003(\0132\023.Proto_msg.Obstacle", 1706);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Proto_msg.Percept.proto", &protobuf_RegisterTypes);
  Point3::default_instance_ = new Point3();
  FreeSpace::default_instance_ = new FreeSpace();
  Obstacle::default_instance_ = new Obstacle();
  FreeSpaces::default_instance_ = new FreeSpaces();
  Obstacles::default_instance_ = new Obstacles();
  Point3::default_instance_->InitAsDefaultInstance();
  FreeSpace::default_instance_->InitAsDefaultInstance();
  Obstacle::default_instance_->InitAsDefaultInstance();
  FreeSpaces::default_instance_->InitAsDefaultInstance();
  Obstacles::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Proto_5fmsg_2ePercept_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Proto_5fmsg_2ePercept_2eproto {
  StaticDescriptorInitializer_Proto_5fmsg_2ePercept_2eproto() {
    protobuf_AddDesc_Proto_5fmsg_2ePercept_2eproto();
  }
} static_descriptor_initializer_Proto_5fmsg_2ePercept_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Point3::kXFieldNumber;
const int Point3::kYFieldNumber;
const int Point3::kZFieldNumber;
#endif  // !_MSC_VER

Point3::Point3()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Proto_msg.Point3)
}

void Point3::InitAsDefaultInstance() {
}

Point3::Point3(const Point3& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Proto_msg.Point3)
}

void Point3::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  z_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Point3::~Point3() {
  // @@protoc_insertion_point(destructor:Proto_msg.Point3)
  SharedDtor();
}

void Point3::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Point3::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Point3::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Point3_descriptor_;
}

const Point3& Point3::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Proto_5fmsg_2ePercept_2eproto();
  return *default_instance_;
}

Point3* Point3::default_instance_ = NULL;

Point3* Point3::New() const {
  return new Point3;
}

void Point3::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Point3*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(x_, z_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Point3::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Proto_msg.Point3)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float x = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_y;
        break;
      }

      // optional float y = 2;
      case 2: {
        if (tag == 21) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_z;
        break;
      }

      // optional float z = 3;
      case 3: {
        if (tag == 29) {
         parse_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &z_)));
          set_has_z();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Proto_msg.Point3)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Proto_msg.Point3)
  return false;
#undef DO_
}

void Point3::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Proto_msg.Point3)
  // optional float x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }

  // optional float y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }

  // optional float z = 3;
  if (has_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->z(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Proto_msg.Point3)
}

::google::protobuf::uint8* Point3::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto_msg.Point3)
  // optional float x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }

  // optional float y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }

  // optional float z = 3;
  if (has_z()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->z(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto_msg.Point3)
  return target;
}

int Point3::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional float x = 1;
    if (has_x()) {
      total_size += 1 + 4;
    }

    // optional float y = 2;
    if (has_y()) {
      total_size += 1 + 4;
    }

    // optional float z = 3;
    if (has_z()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Point3::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Point3* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Point3*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Point3::MergeFrom(const Point3& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_z()) {
      set_z(from.z());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Point3::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Point3::CopyFrom(const Point3& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Point3::IsInitialized() const {

  return true;
}

void Point3::Swap(Point3* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(z_, other->z_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Point3::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Point3_descriptor_;
  metadata.reflection = Point3_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FreeSpace::kTimestampFieldNumber;
const int FreeSpace::kDeviceCodeFieldNumber;
const int FreeSpace::kDistanceFieldNumber;
const int FreeSpace::kYawAngleFieldNumber;
const int FreeSpace::kFreeProbFieldNumber;
#endif  // !_MSC_VER

FreeSpace::FreeSpace()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Proto_msg.FreeSpace)
}

void FreeSpace::InitAsDefaultInstance() {
}

FreeSpace::FreeSpace(const FreeSpace& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Proto_msg.FreeSpace)
}

void FreeSpace::SharedCtor() {
  _cached_size_ = 0;
  timestamp_ = 0;
  device_code_ = 0u;
  distance_ = 0;
  yaw_angle_ = 0;
  free_prob_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FreeSpace::~FreeSpace() {
  // @@protoc_insertion_point(destructor:Proto_msg.FreeSpace)
  SharedDtor();
}

void FreeSpace::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FreeSpace::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FreeSpace::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FreeSpace_descriptor_;
}

const FreeSpace& FreeSpace::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Proto_5fmsg_2ePercept_2eproto();
  return *default_instance_;
}

FreeSpace* FreeSpace::default_instance_ = NULL;

FreeSpace* FreeSpace::New() const {
  return new FreeSpace;
}

void FreeSpace::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<FreeSpace*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(timestamp_, free_prob_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FreeSpace::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Proto_msg.FreeSpace)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double timestamp = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_device_code;
        break;
      }

      // optional uint32 device_code = 2;
      case 2: {
        if (tag == 16) {
         parse_device_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &device_code_)));
          set_has_device_code();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_distance;
        break;
      }

      // optional float distance = 3;
      case 3: {
        if (tag == 29) {
         parse_distance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &distance_)));
          set_has_distance();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_yaw_angle;
        break;
      }

      // optional float yaw_angle = 4;
      case 4: {
        if (tag == 37) {
         parse_yaw_angle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &yaw_angle_)));
          set_has_yaw_angle();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_free_prob;
        break;
      }

      // optional float free_prob = 5;
      case 5: {
        if (tag == 45) {
         parse_free_prob:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &free_prob_)));
          set_has_free_prob();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Proto_msg.FreeSpace)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Proto_msg.FreeSpace)
  return false;
#undef DO_
}

void FreeSpace::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Proto_msg.FreeSpace)
  // optional double timestamp = 1;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->timestamp(), output);
  }

  // optional uint32 device_code = 2;
  if (has_device_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->device_code(), output);
  }

  // optional float distance = 3;
  if (has_distance()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->distance(), output);
  }

  // optional float yaw_angle = 4;
  if (has_yaw_angle()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->yaw_angle(), output);
  }

  // optional float free_prob = 5;
  if (has_free_prob()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->free_prob(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Proto_msg.FreeSpace)
}

::google::protobuf::uint8* FreeSpace::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto_msg.FreeSpace)
  // optional double timestamp = 1;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->timestamp(), target);
  }

  // optional uint32 device_code = 2;
  if (has_device_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->device_code(), target);
  }

  // optional float distance = 3;
  if (has_distance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->distance(), target);
  }

  // optional float yaw_angle = 4;
  if (has_yaw_angle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->yaw_angle(), target);
  }

  // optional float free_prob = 5;
  if (has_free_prob()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->free_prob(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto_msg.FreeSpace)
  return target;
}

int FreeSpace::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional double timestamp = 1;
    if (has_timestamp()) {
      total_size += 1 + 8;
    }

    // optional uint32 device_code = 2;
    if (has_device_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->device_code());
    }

    // optional float distance = 3;
    if (has_distance()) {
      total_size += 1 + 4;
    }

    // optional float yaw_angle = 4;
    if (has_yaw_angle()) {
      total_size += 1 + 4;
    }

    // optional float free_prob = 5;
    if (has_free_prob()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FreeSpace::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FreeSpace* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FreeSpace*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FreeSpace::MergeFrom(const FreeSpace& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
    if (from.has_device_code()) {
      set_device_code(from.device_code());
    }
    if (from.has_distance()) {
      set_distance(from.distance());
    }
    if (from.has_yaw_angle()) {
      set_yaw_angle(from.yaw_angle());
    }
    if (from.has_free_prob()) {
      set_free_prob(from.free_prob());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FreeSpace::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FreeSpace::CopyFrom(const FreeSpace& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FreeSpace::IsInitialized() const {

  return true;
}

void FreeSpace::Swap(FreeSpace* other) {
  if (other != this) {
    std::swap(timestamp_, other->timestamp_);
    std::swap(device_code_, other->device_code_);
    std::swap(distance_, other->distance_);
    std::swap(yaw_angle_, other->yaw_angle_);
    std::swap(free_prob_, other->free_prob_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FreeSpace::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FreeSpace_descriptor_;
  metadata.reflection = FreeSpace_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* Obstacle_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Obstacle_Type_descriptor_;
}
bool Obstacle_Type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Obstacle_Type Obstacle::UNKNOWN;
const Obstacle_Type Obstacle::PEDESTRIAN;
const Obstacle_Type Obstacle::BICYCLE;
const Obstacle_Type Obstacle::CAR;
const Obstacle_Type Obstacle::TRUCK_BUS;
const Obstacle_Type Obstacle::ULTRA_VEHICLE;
const Obstacle_Type Obstacle::Type_MIN;
const Obstacle_Type Obstacle::Type_MAX;
const int Obstacle::Type_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* Obstacle_MotionType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Obstacle_MotionType_descriptor_;
}
bool Obstacle_MotionType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Obstacle_MotionType Obstacle::UNKNOW;
const Obstacle_MotionType Obstacle::MOVING;
const Obstacle_MotionType Obstacle::STATIC;
const Obstacle_MotionType Obstacle::STOPED;
const Obstacle_MotionType Obstacle::MotionType_MIN;
const Obstacle_MotionType Obstacle::MotionType_MAX;
const int Obstacle::MotionType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Obstacle::kTimestampFieldNumber;
const int Obstacle::kDeviceCodeFieldNumber;
const int Obstacle::kIdFieldNumber;
const int Obstacle::kAnchorFieldNumber;
const int Obstacle::kGeoCenterFieldNumber;
const int Obstacle::kGeoSizeFieldNumber;
const int Obstacle::kGeoDirectionFieldNumber;
const int Obstacle::kPolygonFieldNumber;
const int Obstacle::kDetectConfidenceFieldNumber;
const int Obstacle::kNearestPointFieldNumber;
const int Obstacle::kLeftPointFieldNumber;
const int Obstacle::kRightPointFieldNumber;
const int Obstacle::kDistanceFieldNumber;
const int Obstacle::kYawFieldNumber;
const int Obstacle::kPointNumFieldNumber;
const int Obstacle::kTypeFieldNumber;
const int Obstacle::kTypeConfidenceFieldNumber;
const int Obstacle::kLatentTypesFieldNumber;
const int Obstacle::kMotionStateFieldNumber;
const int Obstacle::kIsTrackConvergedFieldNumber;
const int Obstacle::kTrackerIdFieldNumber;
const int Obstacle::kVelocityFieldNumber;
const int Obstacle::kVelocityCovFieldNumber;
const int Obstacle::kVelocityUncertaintyFieldNumber;
const int Obstacle::kAveVelocityFieldNumber;
const int Obstacle::kAccelerationFieldNumber;
const int Obstacle::kAccelerationCovFieldNumber;
const int Obstacle::kAccelerationUncertaintyFieldNumber;
const int Obstacle::kAveAccelerationFieldNumber;
const int Obstacle::kAngleVelocityFieldNumber;
const int Obstacle::kAngleVelocityCovFieldNumber;
const int Obstacle::kAngleVelocityUncertaintyFieldNumber;
const int Obstacle::kAveAngleVelocityFieldNumber;
const int Obstacle::kAssoQualityFieldNumber;
const int Obstacle::kTrackerQualityFieldNumber;
const int Obstacle::kTrackingTimeFieldNumber;
#endif  // !_MSC_VER

Obstacle::Obstacle()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Proto_msg.Obstacle)
}

void Obstacle::InitAsDefaultInstance() {
  anchor_ = const_cast< ::Proto_msg::Point3*>(&::Proto_msg::Point3::default_instance());
  geo_center_ = const_cast< ::Proto_msg::Point3*>(&::Proto_msg::Point3::default_instance());
  geo_size_ = const_cast< ::Proto_msg::Point3*>(&::Proto_msg::Point3::default_instance());
  geo_direction_ = const_cast< ::Proto_msg::Point3*>(&::Proto_msg::Point3::default_instance());
  nearest_point_ = const_cast< ::Proto_msg::Point3*>(&::Proto_msg::Point3::default_instance());
  left_point_ = const_cast< ::Proto_msg::Point3*>(&::Proto_msg::Point3::default_instance());
  right_point_ = const_cast< ::Proto_msg::Point3*>(&::Proto_msg::Point3::default_instance());
  velocity_ = const_cast< ::Proto_msg::Point3*>(&::Proto_msg::Point3::default_instance());
  ave_velocity_ = const_cast< ::Proto_msg::Point3*>(&::Proto_msg::Point3::default_instance());
  acceleration_ = const_cast< ::Proto_msg::Point3*>(&::Proto_msg::Point3::default_instance());
  ave_acceleration_ = const_cast< ::Proto_msg::Point3*>(&::Proto_msg::Point3::default_instance());
}

Obstacle::Obstacle(const Obstacle& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Proto_msg.Obstacle)
}

void Obstacle::SharedCtor() {
  _cached_size_ = 0;
  timestamp_ = 0;
  device_code_ = 0u;
  id_ = 0;
  anchor_ = NULL;
  geo_center_ = NULL;
  geo_size_ = NULL;
  geo_direction_ = NULL;
  detect_confidence_ = 0;
  nearest_point_ = NULL;
  left_point_ = NULL;
  right_point_ = NULL;
  distance_ = 0;
  yaw_ = 0;
  point_num_ = 0;
  type_ = 0;
  type_confidence_ = 0;
  motion_state_ = 0;
  is_track_converged_ = false;
  tracker_id_ = 0;
  velocity_ = NULL;
  velocity_uncertainty_ = 0;
  ave_velocity_ = NULL;
  acceleration_ = NULL;
  acceleration_uncertainty_ = 0;
  ave_acceleration_ = NULL;
  angle_velocity_ = 0;
  angle_velocity_cov_ = 0;
  angle_velocity_uncertainty_ = 0;
  ave_angle_velocity_ = 0;
  asso_quality_ = 0;
  tracker_quality_ = 0;
  tracking_time_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Obstacle::~Obstacle() {
  // @@protoc_insertion_point(destructor:Proto_msg.Obstacle)
  SharedDtor();
}

void Obstacle::SharedDtor() {
  if (this != default_instance_) {
    delete anchor_;
    delete geo_center_;
    delete geo_size_;
    delete geo_direction_;
    delete nearest_point_;
    delete left_point_;
    delete right_point_;
    delete velocity_;
    delete ave_velocity_;
    delete acceleration_;
    delete ave_acceleration_;
  }
}

void Obstacle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Obstacle::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Obstacle_descriptor_;
}

const Obstacle& Obstacle::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Proto_5fmsg_2ePercept_2eproto();
  return *default_instance_;
}

Obstacle* Obstacle::default_instance_ = NULL;

Obstacle* Obstacle::New() const {
  return new Obstacle;
}

void Obstacle::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Obstacle*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(timestamp_, id_);
    if (has_anchor()) {
      if (anchor_ != NULL) anchor_->::Proto_msg::Point3::Clear();
    }
    if (has_geo_center()) {
      if (geo_center_ != NULL) geo_center_->::Proto_msg::Point3::Clear();
    }
    if (has_geo_size()) {
      if (geo_size_ != NULL) geo_size_->::Proto_msg::Point3::Clear();
    }
    if (has_geo_direction()) {
      if (geo_direction_ != NULL) geo_direction_->::Proto_msg::Point3::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 65280) {
    ZR_(detect_confidence_, distance_);
    ZR_(yaw_, type_);
    if (has_nearest_point()) {
      if (nearest_point_ != NULL) nearest_point_->::Proto_msg::Point3::Clear();
    }
    if (has_left_point()) {
      if (left_point_ != NULL) left_point_->::Proto_msg::Point3::Clear();
    }
    if (has_right_point()) {
      if (right_point_ != NULL) right_point_->::Proto_msg::Point3::Clear();
    }
  }
  if (_has_bits_[16 / 32] & 12386304) {
    ZR_(motion_state_, is_track_converged_);
    ZR_(tracker_id_, velocity_uncertainty_);
    type_confidence_ = 0;
    if (has_velocity()) {
      if (velocity_ != NULL) velocity_->::Proto_msg::Point3::Clear();
    }
  }
  if (_has_bits_[24 / 32] & 4211081216) {
    ZR_(acceleration_uncertainty_, angle_velocity_uncertainty_);
    if (has_ave_velocity()) {
      if (ave_velocity_ != NULL) ave_velocity_->::Proto_msg::Point3::Clear();
    }
    if (has_acceleration()) {
      if (acceleration_ != NULL) acceleration_->::Proto_msg::Point3::Clear();
    }
    if (has_ave_acceleration()) {
      if (ave_acceleration_ != NULL) ave_acceleration_->::Proto_msg::Point3::Clear();
    }
  }
  ZR_(ave_angle_velocity_, tracker_quality_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  polygon_.Clear();
  latent_types_.Clear();
  velocity_cov_.Clear();
  acceleration_cov_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Obstacle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Proto_msg.Obstacle)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double timestamp = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_device_code;
        break;
      }

      // optional uint32 device_code = 2;
      case 2: {
        if (tag == 16) {
         parse_device_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &device_code_)));
          set_has_device_code();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_id;
        break;
      }

      // optional int32 id = 3;
      case 3: {
        if (tag == 24) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_anchor;
        break;
      }

      // optional .Proto_msg.Point3 anchor = 4;
      case 4: {
        if (tag == 34) {
         parse_anchor:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_anchor()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_geo_center;
        break;
      }

      // optional .Proto_msg.Point3 geo_center = 5;
      case 5: {
        if (tag == 42) {
         parse_geo_center:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_geo_center()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_geo_size;
        break;
      }

      // optional .Proto_msg.Point3 geo_size = 6;
      case 6: {
        if (tag == 50) {
         parse_geo_size:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_geo_size()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_geo_direction;
        break;
      }

      // optional .Proto_msg.Point3 geo_direction = 7;
      case 7: {
        if (tag == 58) {
         parse_geo_direction:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_geo_direction()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_polygon;
        break;
      }

      // repeated .Proto_msg.Point3 polygon = 8;
      case 8: {
        if (tag == 66) {
         parse_polygon:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_polygon()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_polygon;
        if (input->ExpectTag(77)) goto parse_detect_confidence;
        break;
      }

      // optional float detect_confidence = 9;
      case 9: {
        if (tag == 77) {
         parse_detect_confidence:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &detect_confidence_)));
          set_has_detect_confidence();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_nearest_point;
        break;
      }

      // optional .Proto_msg.Point3 nearest_point = 10;
      case 10: {
        if (tag == 82) {
         parse_nearest_point:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_nearest_point()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_left_point;
        break;
      }

      // optional .Proto_msg.Point3 left_point = 11;
      case 11: {
        if (tag == 90) {
         parse_left_point:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_left_point()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_right_point;
        break;
      }

      // optional .Proto_msg.Point3 right_point = 12;
      case 12: {
        if (tag == 98) {
         parse_right_point:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_right_point()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(109)) goto parse_distance;
        break;
      }

      // optional float distance = 13;
      case 13: {
        if (tag == 109) {
         parse_distance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &distance_)));
          set_has_distance();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(117)) goto parse_yaw;
        break;
      }

      // optional float yaw = 14;
      case 14: {
        if (tag == 117) {
         parse_yaw:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &yaw_)));
          set_has_yaw();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_point_num;
        break;
      }

      // optional int32 point_num = 15;
      case 15: {
        if (tag == 120) {
         parse_point_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &point_num_)));
          set_has_point_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_type;
        break;
      }

      // optional .Proto_msg.Obstacle.Type type = 16;
      case 16: {
        if (tag == 128) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Proto_msg::Obstacle_Type_IsValid(value)) {
            set_type(static_cast< ::Proto_msg::Obstacle_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(16, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(141)) goto parse_type_confidence;
        break;
      }

      // optional float type_confidence = 17;
      case 17: {
        if (tag == 141) {
         parse_type_confidence:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &type_confidence_)));
          set_has_type_confidence();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(149)) goto parse_latent_types;
        break;
      }

      // repeated float latent_types = 18;
      case 18: {
        if (tag == 149) {
         parse_latent_types:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 2, 149, input, this->mutable_latent_types())));
        } else if (tag == 146) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_latent_types())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(149)) goto parse_latent_types;
        if (input->ExpectTag(152)) goto parse_motion_state;
        break;
      }

      // optional .Proto_msg.Obstacle.MotionType motion_state = 19;
      case 19: {
        if (tag == 152) {
         parse_motion_state:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Proto_msg::Obstacle_MotionType_IsValid(value)) {
            set_motion_state(static_cast< ::Proto_msg::Obstacle_MotionType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(19, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(160)) goto parse_is_track_converged;
        break;
      }

      // optional bool is_track_converged = 20;
      case 20: {
        if (tag == 160) {
         parse_is_track_converged:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_track_converged_)));
          set_has_is_track_converged();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(168)) goto parse_tracker_id;
        break;
      }

      // optional int32 tracker_id = 21;
      case 21: {
        if (tag == 168) {
         parse_tracker_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tracker_id_)));
          set_has_tracker_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(178)) goto parse_velocity;
        break;
      }

      // optional .Proto_msg.Point3 velocity = 22;
      case 22: {
        if (tag == 178) {
         parse_velocity:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_velocity()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(189)) goto parse_velocity_cov;
        break;
      }

      // repeated float velocity_cov = 23;
      case 23: {
        if (tag == 189) {
         parse_velocity_cov:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 2, 189, input, this->mutable_velocity_cov())));
        } else if (tag == 186) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_velocity_cov())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(189)) goto parse_velocity_cov;
        if (input->ExpectTag(197)) goto parse_velocity_uncertainty;
        break;
      }

      // optional float velocity_uncertainty = 24;
      case 24: {
        if (tag == 197) {
         parse_velocity_uncertainty:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &velocity_uncertainty_)));
          set_has_velocity_uncertainty();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(202)) goto parse_ave_velocity;
        break;
      }

      // optional .Proto_msg.Point3 ave_velocity = 25;
      case 25: {
        if (tag == 202) {
         parse_ave_velocity:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ave_velocity()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(210)) goto parse_acceleration;
        break;
      }

      // optional .Proto_msg.Point3 acceleration = 26;
      case 26: {
        if (tag == 210) {
         parse_acceleration:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_acceleration()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(221)) goto parse_acceleration_cov;
        break;
      }

      // repeated float acceleration_cov = 27;
      case 27: {
        if (tag == 221) {
         parse_acceleration_cov:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 2, 221, input, this->mutable_acceleration_cov())));
        } else if (tag == 218) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_acceleration_cov())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(221)) goto parse_acceleration_cov;
        if (input->ExpectTag(229)) goto parse_acceleration_uncertainty;
        break;
      }

      // optional float acceleration_uncertainty = 28;
      case 28: {
        if (tag == 229) {
         parse_acceleration_uncertainty:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &acceleration_uncertainty_)));
          set_has_acceleration_uncertainty();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(234)) goto parse_ave_acceleration;
        break;
      }

      // optional .Proto_msg.Point3 ave_acceleration = 29;
      case 29: {
        if (tag == 234) {
         parse_ave_acceleration:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ave_acceleration()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(245)) goto parse_angle_velocity;
        break;
      }

      // optional float angle_velocity = 30;
      case 30: {
        if (tag == 245) {
         parse_angle_velocity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &angle_velocity_)));
          set_has_angle_velocity();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(253)) goto parse_angle_velocity_cov;
        break;
      }

      // optional float angle_velocity_cov = 31;
      case 31: {
        if (tag == 253) {
         parse_angle_velocity_cov:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &angle_velocity_cov_)));
          set_has_angle_velocity_cov();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(261)) goto parse_angle_velocity_uncertainty;
        break;
      }

      // optional float angle_velocity_uncertainty = 32;
      case 32: {
        if (tag == 261) {
         parse_angle_velocity_uncertainty:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &angle_velocity_uncertainty_)));
          set_has_angle_velocity_uncertainty();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(269)) goto parse_ave_angle_velocity;
        break;
      }

      // optional float ave_angle_velocity = 33;
      case 33: {
        if (tag == 269) {
         parse_ave_angle_velocity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &ave_angle_velocity_)));
          set_has_ave_angle_velocity();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(277)) goto parse_asso_quality;
        break;
      }

      // optional float asso_quality = 34;
      case 34: {
        if (tag == 277) {
         parse_asso_quality:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &asso_quality_)));
          set_has_asso_quality();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(285)) goto parse_tracker_quality;
        break;
      }

      // optional float tracker_quality = 35;
      case 35: {
        if (tag == 285) {
         parse_tracker_quality:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &tracker_quality_)));
          set_has_tracker_quality();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(289)) goto parse_tracking_time;
        break;
      }

      // optional double tracking_time = 36;
      case 36: {
        if (tag == 289) {
         parse_tracking_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &tracking_time_)));
          set_has_tracking_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Proto_msg.Obstacle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Proto_msg.Obstacle)
  return false;
#undef DO_
}

void Obstacle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Proto_msg.Obstacle)
  // optional double timestamp = 1;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->timestamp(), output);
  }

  // optional uint32 device_code = 2;
  if (has_device_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->device_code(), output);
  }

  // optional int32 id = 3;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->id(), output);
  }

  // optional .Proto_msg.Point3 anchor = 4;
  if (has_anchor()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->anchor(), output);
  }

  // optional .Proto_msg.Point3 geo_center = 5;
  if (has_geo_center()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->geo_center(), output);
  }

  // optional .Proto_msg.Point3 geo_size = 6;
  if (has_geo_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->geo_size(), output);
  }

  // optional .Proto_msg.Point3 geo_direction = 7;
  if (has_geo_direction()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->geo_direction(), output);
  }

  // repeated .Proto_msg.Point3 polygon = 8;
  for (int i = 0; i < this->polygon_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->polygon(i), output);
  }

  // optional float detect_confidence = 9;
  if (has_detect_confidence()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->detect_confidence(), output);
  }

  // optional .Proto_msg.Point3 nearest_point = 10;
  if (has_nearest_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->nearest_point(), output);
  }

  // optional .Proto_msg.Point3 left_point = 11;
  if (has_left_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->left_point(), output);
  }

  // optional .Proto_msg.Point3 right_point = 12;
  if (has_right_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->right_point(), output);
  }

  // optional float distance = 13;
  if (has_distance()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(13, this->distance(), output);
  }

  // optional float yaw = 14;
  if (has_yaw()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(14, this->yaw(), output);
  }

  // optional int32 point_num = 15;
  if (has_point_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->point_num(), output);
  }

  // optional .Proto_msg.Obstacle.Type type = 16;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      16, this->type(), output);
  }

  // optional float type_confidence = 17;
  if (has_type_confidence()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(17, this->type_confidence(), output);
  }

  // repeated float latent_types = 18;
  for (int i = 0; i < this->latent_types_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      18, this->latent_types(i), output);
  }

  // optional .Proto_msg.Obstacle.MotionType motion_state = 19;
  if (has_motion_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      19, this->motion_state(), output);
  }

  // optional bool is_track_converged = 20;
  if (has_is_track_converged()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(20, this->is_track_converged(), output);
  }

  // optional int32 tracker_id = 21;
  if (has_tracker_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->tracker_id(), output);
  }

  // optional .Proto_msg.Point3 velocity = 22;
  if (has_velocity()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      22, this->velocity(), output);
  }

  // repeated float velocity_cov = 23;
  for (int i = 0; i < this->velocity_cov_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      23, this->velocity_cov(i), output);
  }

  // optional float velocity_uncertainty = 24;
  if (has_velocity_uncertainty()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(24, this->velocity_uncertainty(), output);
  }

  // optional .Proto_msg.Point3 ave_velocity = 25;
  if (has_ave_velocity()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      25, this->ave_velocity(), output);
  }

  // optional .Proto_msg.Point3 acceleration = 26;
  if (has_acceleration()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      26, this->acceleration(), output);
  }

  // repeated float acceleration_cov = 27;
  for (int i = 0; i < this->acceleration_cov_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      27, this->acceleration_cov(i), output);
  }

  // optional float acceleration_uncertainty = 28;
  if (has_acceleration_uncertainty()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(28, this->acceleration_uncertainty(), output);
  }

  // optional .Proto_msg.Point3 ave_acceleration = 29;
  if (has_ave_acceleration()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      29, this->ave_acceleration(), output);
  }

  // optional float angle_velocity = 30;
  if (has_angle_velocity()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(30, this->angle_velocity(), output);
  }

  // optional float angle_velocity_cov = 31;
  if (has_angle_velocity_cov()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(31, this->angle_velocity_cov(), output);
  }

  // optional float angle_velocity_uncertainty = 32;
  if (has_angle_velocity_uncertainty()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(32, this->angle_velocity_uncertainty(), output);
  }

  // optional float ave_angle_velocity = 33;
  if (has_ave_angle_velocity()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(33, this->ave_angle_velocity(), output);
  }

  // optional float asso_quality = 34;
  if (has_asso_quality()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(34, this->asso_quality(), output);
  }

  // optional float tracker_quality = 35;
  if (has_tracker_quality()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(35, this->tracker_quality(), output);
  }

  // optional double tracking_time = 36;
  if (has_tracking_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(36, this->tracking_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Proto_msg.Obstacle)
}

::google::protobuf::uint8* Obstacle::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto_msg.Obstacle)
  // optional double timestamp = 1;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->timestamp(), target);
  }

  // optional uint32 device_code = 2;
  if (has_device_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->device_code(), target);
  }

  // optional int32 id = 3;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->id(), target);
  }

  // optional .Proto_msg.Point3 anchor = 4;
  if (has_anchor()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->anchor(), target);
  }

  // optional .Proto_msg.Point3 geo_center = 5;
  if (has_geo_center()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->geo_center(), target);
  }

  // optional .Proto_msg.Point3 geo_size = 6;
  if (has_geo_size()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->geo_size(), target);
  }

  // optional .Proto_msg.Point3 geo_direction = 7;
  if (has_geo_direction()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->geo_direction(), target);
  }

  // repeated .Proto_msg.Point3 polygon = 8;
  for (int i = 0; i < this->polygon_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->polygon(i), target);
  }

  // optional float detect_confidence = 9;
  if (has_detect_confidence()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->detect_confidence(), target);
  }

  // optional .Proto_msg.Point3 nearest_point = 10;
  if (has_nearest_point()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->nearest_point(), target);
  }

  // optional .Proto_msg.Point3 left_point = 11;
  if (has_left_point()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->left_point(), target);
  }

  // optional .Proto_msg.Point3 right_point = 12;
  if (has_right_point()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->right_point(), target);
  }

  // optional float distance = 13;
  if (has_distance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(13, this->distance(), target);
  }

  // optional float yaw = 14;
  if (has_yaw()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(14, this->yaw(), target);
  }

  // optional int32 point_num = 15;
  if (has_point_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->point_num(), target);
  }

  // optional .Proto_msg.Obstacle.Type type = 16;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      16, this->type(), target);
  }

  // optional float type_confidence = 17;
  if (has_type_confidence()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(17, this->type_confidence(), target);
  }

  // repeated float latent_types = 18;
  for (int i = 0; i < this->latent_types_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(18, this->latent_types(i), target);
  }

  // optional .Proto_msg.Obstacle.MotionType motion_state = 19;
  if (has_motion_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      19, this->motion_state(), target);
  }

  // optional bool is_track_converged = 20;
  if (has_is_track_converged()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(20, this->is_track_converged(), target);
  }

  // optional int32 tracker_id = 21;
  if (has_tracker_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->tracker_id(), target);
  }

  // optional .Proto_msg.Point3 velocity = 22;
  if (has_velocity()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        22, this->velocity(), target);
  }

  // repeated float velocity_cov = 23;
  for (int i = 0; i < this->velocity_cov_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(23, this->velocity_cov(i), target);
  }

  // optional float velocity_uncertainty = 24;
  if (has_velocity_uncertainty()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(24, this->velocity_uncertainty(), target);
  }

  // optional .Proto_msg.Point3 ave_velocity = 25;
  if (has_ave_velocity()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        25, this->ave_velocity(), target);
  }

  // optional .Proto_msg.Point3 acceleration = 26;
  if (has_acceleration()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        26, this->acceleration(), target);
  }

  // repeated float acceleration_cov = 27;
  for (int i = 0; i < this->acceleration_cov_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(27, this->acceleration_cov(i), target);
  }

  // optional float acceleration_uncertainty = 28;
  if (has_acceleration_uncertainty()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(28, this->acceleration_uncertainty(), target);
  }

  // optional .Proto_msg.Point3 ave_acceleration = 29;
  if (has_ave_acceleration()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        29, this->ave_acceleration(), target);
  }

  // optional float angle_velocity = 30;
  if (has_angle_velocity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(30, this->angle_velocity(), target);
  }

  // optional float angle_velocity_cov = 31;
  if (has_angle_velocity_cov()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(31, this->angle_velocity_cov(), target);
  }

  // optional float angle_velocity_uncertainty = 32;
  if (has_angle_velocity_uncertainty()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(32, this->angle_velocity_uncertainty(), target);
  }

  // optional float ave_angle_velocity = 33;
  if (has_ave_angle_velocity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(33, this->ave_angle_velocity(), target);
  }

  // optional float asso_quality = 34;
  if (has_asso_quality()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(34, this->asso_quality(), target);
  }

  // optional float tracker_quality = 35;
  if (has_tracker_quality()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(35, this->tracker_quality(), target);
  }

  // optional double tracking_time = 36;
  if (has_tracking_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(36, this->tracking_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto_msg.Obstacle)
  return target;
}

int Obstacle::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional double timestamp = 1;
    if (has_timestamp()) {
      total_size += 1 + 8;
    }

    // optional uint32 device_code = 2;
    if (has_device_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->device_code());
    }

    // optional int32 id = 3;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional .Proto_msg.Point3 anchor = 4;
    if (has_anchor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->anchor());
    }

    // optional .Proto_msg.Point3 geo_center = 5;
    if (has_geo_center()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->geo_center());
    }

    // optional .Proto_msg.Point3 geo_size = 6;
    if (has_geo_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->geo_size());
    }

    // optional .Proto_msg.Point3 geo_direction = 7;
    if (has_geo_direction()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->geo_direction());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional float detect_confidence = 9;
    if (has_detect_confidence()) {
      total_size += 1 + 4;
    }

    // optional .Proto_msg.Point3 nearest_point = 10;
    if (has_nearest_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->nearest_point());
    }

    // optional .Proto_msg.Point3 left_point = 11;
    if (has_left_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->left_point());
    }

    // optional .Proto_msg.Point3 right_point = 12;
    if (has_right_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->right_point());
    }

    // optional float distance = 13;
    if (has_distance()) {
      total_size += 1 + 4;
    }

    // optional float yaw = 14;
    if (has_yaw()) {
      total_size += 1 + 4;
    }

    // optional int32 point_num = 15;
    if (has_point_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->point_num());
    }

    // optional .Proto_msg.Obstacle.Type type = 16;
    if (has_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional float type_confidence = 17;
    if (has_type_confidence()) {
      total_size += 2 + 4;
    }

    // optional .Proto_msg.Obstacle.MotionType motion_state = 19;
    if (has_motion_state()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->motion_state());
    }

    // optional bool is_track_converged = 20;
    if (has_is_track_converged()) {
      total_size += 2 + 1;
    }

    // optional int32 tracker_id = 21;
    if (has_tracker_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tracker_id());
    }

    // optional .Proto_msg.Point3 velocity = 22;
    if (has_velocity()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->velocity());
    }

    // optional float velocity_uncertainty = 24;
    if (has_velocity_uncertainty()) {
      total_size += 2 + 4;
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional .Proto_msg.Point3 ave_velocity = 25;
    if (has_ave_velocity()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ave_velocity());
    }

    // optional .Proto_msg.Point3 acceleration = 26;
    if (has_acceleration()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->acceleration());
    }

    // optional float acceleration_uncertainty = 28;
    if (has_acceleration_uncertainty()) {
      total_size += 2 + 4;
    }

    // optional .Proto_msg.Point3 ave_acceleration = 29;
    if (has_ave_acceleration()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ave_acceleration());
    }

    // optional float angle_velocity = 30;
    if (has_angle_velocity()) {
      total_size += 2 + 4;
    }

    // optional float angle_velocity_cov = 31;
    if (has_angle_velocity_cov()) {
      total_size += 2 + 4;
    }

    // optional float angle_velocity_uncertainty = 32;
    if (has_angle_velocity_uncertainty()) {
      total_size += 2 + 4;
    }

  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // optional float ave_angle_velocity = 33;
    if (has_ave_angle_velocity()) {
      total_size += 2 + 4;
    }

    // optional float asso_quality = 34;
    if (has_asso_quality()) {
      total_size += 2 + 4;
    }

    // optional float tracker_quality = 35;
    if (has_tracker_quality()) {
      total_size += 2 + 4;
    }

    // optional double tracking_time = 36;
    if (has_tracking_time()) {
      total_size += 2 + 8;
    }

  }
  // repeated .Proto_msg.Point3 polygon = 8;
  total_size += 1 * this->polygon_size();
  for (int i = 0; i < this->polygon_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->polygon(i));
  }

  // repeated float latent_types = 18;
  {
    int data_size = 0;
    data_size = 4 * this->latent_types_size();
    total_size += 2 * this->latent_types_size() + data_size;
  }

  // repeated float velocity_cov = 23;
  {
    int data_size = 0;
    data_size = 4 * this->velocity_cov_size();
    total_size += 2 * this->velocity_cov_size() + data_size;
  }

  // repeated float acceleration_cov = 27;
  {
    int data_size = 0;
    data_size = 4 * this->acceleration_cov_size();
    total_size += 2 * this->acceleration_cov_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Obstacle::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Obstacle* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Obstacle*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Obstacle::MergeFrom(const Obstacle& from) {
  GOOGLE_CHECK_NE(&from, this);
  polygon_.MergeFrom(from.polygon_);
  latent_types_.MergeFrom(from.latent_types_);
  velocity_cov_.MergeFrom(from.velocity_cov_);
  acceleration_cov_.MergeFrom(from.acceleration_cov_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
    if (from.has_device_code()) {
      set_device_code(from.device_code());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_anchor()) {
      mutable_anchor()->::Proto_msg::Point3::MergeFrom(from.anchor());
    }
    if (from.has_geo_center()) {
      mutable_geo_center()->::Proto_msg::Point3::MergeFrom(from.geo_center());
    }
    if (from.has_geo_size()) {
      mutable_geo_size()->::Proto_msg::Point3::MergeFrom(from.geo_size());
    }
    if (from.has_geo_direction()) {
      mutable_geo_direction()->::Proto_msg::Point3::MergeFrom(from.geo_direction());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_detect_confidence()) {
      set_detect_confidence(from.detect_confidence());
    }
    if (from.has_nearest_point()) {
      mutable_nearest_point()->::Proto_msg::Point3::MergeFrom(from.nearest_point());
    }
    if (from.has_left_point()) {
      mutable_left_point()->::Proto_msg::Point3::MergeFrom(from.left_point());
    }
    if (from.has_right_point()) {
      mutable_right_point()->::Proto_msg::Point3::MergeFrom(from.right_point());
    }
    if (from.has_distance()) {
      set_distance(from.distance());
    }
    if (from.has_yaw()) {
      set_yaw(from.yaw());
    }
    if (from.has_point_num()) {
      set_point_num(from.point_num());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_type_confidence()) {
      set_type_confidence(from.type_confidence());
    }
    if (from.has_motion_state()) {
      set_motion_state(from.motion_state());
    }
    if (from.has_is_track_converged()) {
      set_is_track_converged(from.is_track_converged());
    }
    if (from.has_tracker_id()) {
      set_tracker_id(from.tracker_id());
    }
    if (from.has_velocity()) {
      mutable_velocity()->::Proto_msg::Point3::MergeFrom(from.velocity());
    }
    if (from.has_velocity_uncertainty()) {
      set_velocity_uncertainty(from.velocity_uncertainty());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_ave_velocity()) {
      mutable_ave_velocity()->::Proto_msg::Point3::MergeFrom(from.ave_velocity());
    }
    if (from.has_acceleration()) {
      mutable_acceleration()->::Proto_msg::Point3::MergeFrom(from.acceleration());
    }
    if (from.has_acceleration_uncertainty()) {
      set_acceleration_uncertainty(from.acceleration_uncertainty());
    }
    if (from.has_ave_acceleration()) {
      mutable_ave_acceleration()->::Proto_msg::Point3::MergeFrom(from.ave_acceleration());
    }
    if (from.has_angle_velocity()) {
      set_angle_velocity(from.angle_velocity());
    }
    if (from.has_angle_velocity_cov()) {
      set_angle_velocity_cov(from.angle_velocity_cov());
    }
    if (from.has_angle_velocity_uncertainty()) {
      set_angle_velocity_uncertainty(from.angle_velocity_uncertainty());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_ave_angle_velocity()) {
      set_ave_angle_velocity(from.ave_angle_velocity());
    }
    if (from.has_asso_quality()) {
      set_asso_quality(from.asso_quality());
    }
    if (from.has_tracker_quality()) {
      set_tracker_quality(from.tracker_quality());
    }
    if (from.has_tracking_time()) {
      set_tracking_time(from.tracking_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Obstacle::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Obstacle::CopyFrom(const Obstacle& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Obstacle::IsInitialized() const {

  return true;
}

void Obstacle::Swap(Obstacle* other) {
  if (other != this) {
    std::swap(timestamp_, other->timestamp_);
    std::swap(device_code_, other->device_code_);
    std::swap(id_, other->id_);
    std::swap(anchor_, other->anchor_);
    std::swap(geo_center_, other->geo_center_);
    std::swap(geo_size_, other->geo_size_);
    std::swap(geo_direction_, other->geo_direction_);
    polygon_.Swap(&other->polygon_);
    std::swap(detect_confidence_, other->detect_confidence_);
    std::swap(nearest_point_, other->nearest_point_);
    std::swap(left_point_, other->left_point_);
    std::swap(right_point_, other->right_point_);
    std::swap(distance_, other->distance_);
    std::swap(yaw_, other->yaw_);
    std::swap(point_num_, other->point_num_);
    std::swap(type_, other->type_);
    std::swap(type_confidence_, other->type_confidence_);
    latent_types_.Swap(&other->latent_types_);
    std::swap(motion_state_, other->motion_state_);
    std::swap(is_track_converged_, other->is_track_converged_);
    std::swap(tracker_id_, other->tracker_id_);
    std::swap(velocity_, other->velocity_);
    velocity_cov_.Swap(&other->velocity_cov_);
    std::swap(velocity_uncertainty_, other->velocity_uncertainty_);
    std::swap(ave_velocity_, other->ave_velocity_);
    std::swap(acceleration_, other->acceleration_);
    acceleration_cov_.Swap(&other->acceleration_cov_);
    std::swap(acceleration_uncertainty_, other->acceleration_uncertainty_);
    std::swap(ave_acceleration_, other->ave_acceleration_);
    std::swap(angle_velocity_, other->angle_velocity_);
    std::swap(angle_velocity_cov_, other->angle_velocity_cov_);
    std::swap(angle_velocity_uncertainty_, other->angle_velocity_uncertainty_);
    std::swap(ave_angle_velocity_, other->ave_angle_velocity_);
    std::swap(asso_quality_, other->asso_quality_);
    std::swap(tracker_quality_, other->tracker_quality_);
    std::swap(tracking_time_, other->tracking_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Obstacle::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Obstacle_descriptor_;
  metadata.reflection = Obstacle_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FreeSpaces::kTimestampFieldNumber;
const int FreeSpaces::kSeqFieldNumber;
const int FreeSpaces::kParentFrameIdFieldNumber;
const int FreeSpaces::kFrameIdFieldNumber;
const int FreeSpaces::kFreeSpacesFieldNumber;
#endif  // !_MSC_VER

FreeSpaces::FreeSpaces()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Proto_msg.FreeSpaces)
}

void FreeSpaces::InitAsDefaultInstance() {
}

FreeSpaces::FreeSpaces(const FreeSpaces& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Proto_msg.FreeSpaces)
}

void FreeSpaces::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  timestamp_ = 0;
  seq_ = 0u;
  parent_frame_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  frame_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FreeSpaces::~FreeSpaces() {
  // @@protoc_insertion_point(destructor:Proto_msg.FreeSpaces)
  SharedDtor();
}

void FreeSpaces::SharedDtor() {
  if (parent_frame_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete parent_frame_id_;
  }
  if (frame_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete frame_id_;
  }
  if (this != default_instance_) {
  }
}

void FreeSpaces::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FreeSpaces::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FreeSpaces_descriptor_;
}

const FreeSpaces& FreeSpaces::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Proto_5fmsg_2ePercept_2eproto();
  return *default_instance_;
}

FreeSpaces* FreeSpaces::default_instance_ = NULL;

FreeSpaces* FreeSpaces::New() const {
  return new FreeSpaces;
}

void FreeSpaces::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    timestamp_ = 0;
    seq_ = 0u;
    if (has_parent_frame_id()) {
      if (parent_frame_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        parent_frame_id_->clear();
      }
    }
    if (has_frame_id()) {
      if (frame_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        frame_id_->clear();
      }
    }
  }
  freespaces_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FreeSpaces::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Proto_msg.FreeSpaces)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double timestamp = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_seq;
        break;
      }

      // optional uint32 seq = 2;
      case 2: {
        if (tag == 16) {
         parse_seq:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seq_)));
          set_has_seq();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_parent_frame_id;
        break;
      }

      // optional string parent_frame_id = 3;
      case 3: {
        if (tag == 26) {
         parse_parent_frame_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_parent_frame_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->parent_frame_id().data(), this->parent_frame_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "parent_frame_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_frame_id;
        break;
      }

      // optional string frame_id = 4;
      case 4: {
        if (tag == 34) {
         parse_frame_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_frame_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->frame_id().data(), this->frame_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "frame_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_freeSpaces;
        break;
      }

      // repeated .Proto_msg.FreeSpace freeSpaces = 5;
      case 5: {
        if (tag == 42) {
         parse_freeSpaces:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_freespaces()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_freeSpaces;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Proto_msg.FreeSpaces)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Proto_msg.FreeSpaces)
  return false;
#undef DO_
}

void FreeSpaces::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Proto_msg.FreeSpaces)
  // optional double timestamp = 1;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->timestamp(), output);
  }

  // optional uint32 seq = 2;
  if (has_seq()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->seq(), output);
  }

  // optional string parent_frame_id = 3;
  if (has_parent_frame_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->parent_frame_id().data(), this->parent_frame_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "parent_frame_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->parent_frame_id(), output);
  }

  // optional string frame_id = 4;
  if (has_frame_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->frame_id().data(), this->frame_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "frame_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->frame_id(), output);
  }

  // repeated .Proto_msg.FreeSpace freeSpaces = 5;
  for (int i = 0; i < this->freespaces_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->freespaces(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Proto_msg.FreeSpaces)
}

::google::protobuf::uint8* FreeSpaces::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto_msg.FreeSpaces)
  // optional double timestamp = 1;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->timestamp(), target);
  }

  // optional uint32 seq = 2;
  if (has_seq()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->seq(), target);
  }

  // optional string parent_frame_id = 3;
  if (has_parent_frame_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->parent_frame_id().data(), this->parent_frame_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "parent_frame_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->parent_frame_id(), target);
  }

  // optional string frame_id = 4;
  if (has_frame_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->frame_id().data(), this->frame_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "frame_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->frame_id(), target);
  }

  // repeated .Proto_msg.FreeSpace freeSpaces = 5;
  for (int i = 0; i < this->freespaces_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->freespaces(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto_msg.FreeSpaces)
  return target;
}

int FreeSpaces::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional double timestamp = 1;
    if (has_timestamp()) {
      total_size += 1 + 8;
    }

    // optional uint32 seq = 2;
    if (has_seq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seq());
    }

    // optional string parent_frame_id = 3;
    if (has_parent_frame_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->parent_frame_id());
    }

    // optional string frame_id = 4;
    if (has_frame_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->frame_id());
    }

  }
  // repeated .Proto_msg.FreeSpace freeSpaces = 5;
  total_size += 1 * this->freespaces_size();
  for (int i = 0; i < this->freespaces_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->freespaces(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FreeSpaces::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FreeSpaces* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FreeSpaces*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FreeSpaces::MergeFrom(const FreeSpaces& from) {
  GOOGLE_CHECK_NE(&from, this);
  freespaces_.MergeFrom(from.freespaces_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
    if (from.has_seq()) {
      set_seq(from.seq());
    }
    if (from.has_parent_frame_id()) {
      set_parent_frame_id(from.parent_frame_id());
    }
    if (from.has_frame_id()) {
      set_frame_id(from.frame_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FreeSpaces::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FreeSpaces::CopyFrom(const FreeSpaces& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FreeSpaces::IsInitialized() const {

  return true;
}

void FreeSpaces::Swap(FreeSpaces* other) {
  if (other != this) {
    std::swap(timestamp_, other->timestamp_);
    std::swap(seq_, other->seq_);
    std::swap(parent_frame_id_, other->parent_frame_id_);
    std::swap(frame_id_, other->frame_id_);
    freespaces_.Swap(&other->freespaces_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FreeSpaces::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FreeSpaces_descriptor_;
  metadata.reflection = FreeSpaces_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Obstacles::kTimestampFieldNumber;
const int Obstacles::kSeqFieldNumber;
const int Obstacles::kParentFrameIdFieldNumber;
const int Obstacles::kFrameIdFieldNumber;
const int Obstacles::kObstaclesFieldNumber;
#endif  // !_MSC_VER

Obstacles::Obstacles()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Proto_msg.Obstacles)
}

void Obstacles::InitAsDefaultInstance() {
}

Obstacles::Obstacles(const Obstacles& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Proto_msg.Obstacles)
}

void Obstacles::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  timestamp_ = 0;
  seq_ = 0u;
  parent_frame_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  frame_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Obstacles::~Obstacles() {
  // @@protoc_insertion_point(destructor:Proto_msg.Obstacles)
  SharedDtor();
}

void Obstacles::SharedDtor() {
  if (parent_frame_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete parent_frame_id_;
  }
  if (frame_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete frame_id_;
  }
  if (this != default_instance_) {
  }
}

void Obstacles::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Obstacles::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Obstacles_descriptor_;
}

const Obstacles& Obstacles::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Proto_5fmsg_2ePercept_2eproto();
  return *default_instance_;
}

Obstacles* Obstacles::default_instance_ = NULL;

Obstacles* Obstacles::New() const {
  return new Obstacles;
}

void Obstacles::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    timestamp_ = 0;
    seq_ = 0u;
    if (has_parent_frame_id()) {
      if (parent_frame_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        parent_frame_id_->clear();
      }
    }
    if (has_frame_id()) {
      if (frame_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        frame_id_->clear();
      }
    }
  }
  obstacles_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Obstacles::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Proto_msg.Obstacles)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double timestamp = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_seq;
        break;
      }

      // optional uint32 seq = 2;
      case 2: {
        if (tag == 16) {
         parse_seq:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seq_)));
          set_has_seq();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_parent_frame_id;
        break;
      }

      // optional string parent_frame_id = 3;
      case 3: {
        if (tag == 26) {
         parse_parent_frame_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_parent_frame_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->parent_frame_id().data(), this->parent_frame_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "parent_frame_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_frame_id;
        break;
      }

      // optional string frame_id = 4;
      case 4: {
        if (tag == 34) {
         parse_frame_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_frame_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->frame_id().data(), this->frame_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "frame_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_obstacles;
        break;
      }

      // repeated .Proto_msg.Obstacle obstacles = 5;
      case 5: {
        if (tag == 42) {
         parse_obstacles:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_obstacles()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_obstacles;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Proto_msg.Obstacles)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Proto_msg.Obstacles)
  return false;
#undef DO_
}

void Obstacles::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Proto_msg.Obstacles)
  // optional double timestamp = 1;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->timestamp(), output);
  }

  // optional uint32 seq = 2;
  if (has_seq()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->seq(), output);
  }

  // optional string parent_frame_id = 3;
  if (has_parent_frame_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->parent_frame_id().data(), this->parent_frame_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "parent_frame_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->parent_frame_id(), output);
  }

  // optional string frame_id = 4;
  if (has_frame_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->frame_id().data(), this->frame_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "frame_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->frame_id(), output);
  }

  // repeated .Proto_msg.Obstacle obstacles = 5;
  for (int i = 0; i < this->obstacles_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->obstacles(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Proto_msg.Obstacles)
}

::google::protobuf::uint8* Obstacles::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto_msg.Obstacles)
  // optional double timestamp = 1;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->timestamp(), target);
  }

  // optional uint32 seq = 2;
  if (has_seq()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->seq(), target);
  }

  // optional string parent_frame_id = 3;
  if (has_parent_frame_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->parent_frame_id().data(), this->parent_frame_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "parent_frame_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->parent_frame_id(), target);
  }

  // optional string frame_id = 4;
  if (has_frame_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->frame_id().data(), this->frame_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "frame_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->frame_id(), target);
  }

  // repeated .Proto_msg.Obstacle obstacles = 5;
  for (int i = 0; i < this->obstacles_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->obstacles(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto_msg.Obstacles)
  return target;
}

int Obstacles::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional double timestamp = 1;
    if (has_timestamp()) {
      total_size += 1 + 8;
    }

    // optional uint32 seq = 2;
    if (has_seq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seq());
    }

    // optional string parent_frame_id = 3;
    if (has_parent_frame_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->parent_frame_id());
    }

    // optional string frame_id = 4;
    if (has_frame_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->frame_id());
    }

  }
  // repeated .Proto_msg.Obstacle obstacles = 5;
  total_size += 1 * this->obstacles_size();
  for (int i = 0; i < this->obstacles_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->obstacles(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Obstacles::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Obstacles* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Obstacles*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Obstacles::MergeFrom(const Obstacles& from) {
  GOOGLE_CHECK_NE(&from, this);
  obstacles_.MergeFrom(from.obstacles_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
    if (from.has_seq()) {
      set_seq(from.seq());
    }
    if (from.has_parent_frame_id()) {
      set_parent_frame_id(from.parent_frame_id());
    }
    if (from.has_frame_id()) {
      set_frame_id(from.frame_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Obstacles::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Obstacles::CopyFrom(const Obstacles& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Obstacles::IsInitialized() const {

  return true;
}

void Obstacles::Swap(Obstacles* other) {
  if (other != this) {
    std::swap(timestamp_, other->timestamp_);
    std::swap(seq_, other->seq_);
    std::swap(parent_frame_id_, other->parent_frame_id_);
    std::swap(frame_id_, other->frame_id_);
    obstacles_.Swap(&other->obstacles_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Obstacles::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Obstacles_descriptor_;
  metadata.reflection = Obstacles_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Proto_msg

// @@protoc_insertion_point(global_scope)
