// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Proto_msg.Percept.proto

#ifndef PROTOBUF_Proto_5fmsg_2ePercept_2eproto__INCLUDED
#define PROTOBUF_Proto_5fmsg_2ePercept_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
namespace Proto_msg {
class FreeSpace;
class FreeSpaceDefaultTypeInternal;
extern FreeSpaceDefaultTypeInternal _FreeSpace_default_instance_;
class FreeSpaces;
class FreeSpacesDefaultTypeInternal;
extern FreeSpacesDefaultTypeInternal _FreeSpaces_default_instance_;
class Obstacle;
class ObstacleDefaultTypeInternal;
extern ObstacleDefaultTypeInternal _Obstacle_default_instance_;
class Obstacles;
class ObstaclesDefaultTypeInternal;
extern ObstaclesDefaultTypeInternal _Obstacles_default_instance_;
class Point3;
class Point3DefaultTypeInternal;
extern Point3DefaultTypeInternal _Point3_default_instance_;
}  // namespace Proto_msg

namespace Proto_msg {

namespace protobuf_Proto_5fmsg_2ePercept_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_Proto_5fmsg_2ePercept_2eproto

enum Obstacle_Type {
  Obstacle_Type_UNKNOWN = 0,
  Obstacle_Type_PEDESTRIAN = 1,
  Obstacle_Type_BICYCLE = 2,
  Obstacle_Type_CAR = 3,
  Obstacle_Type_TRUCK_BUS = 4,
  Obstacle_Type_ULTRA_VEHICLE = 5
};
bool Obstacle_Type_IsValid(int value);
const Obstacle_Type Obstacle_Type_Type_MIN = Obstacle_Type_UNKNOWN;
const Obstacle_Type Obstacle_Type_Type_MAX = Obstacle_Type_ULTRA_VEHICLE;
const int Obstacle_Type_Type_ARRAYSIZE = Obstacle_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* Obstacle_Type_descriptor();
inline const ::std::string& Obstacle_Type_Name(Obstacle_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    Obstacle_Type_descriptor(), value);
}
inline bool Obstacle_Type_Parse(
    const ::std::string& name, Obstacle_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Obstacle_Type>(
    Obstacle_Type_descriptor(), name, value);
}
enum Obstacle_MotionType {
  Obstacle_MotionType_UNKNOW = 0,
  Obstacle_MotionType_MOVING = 1,
  Obstacle_MotionType_STATIC = 2,
  Obstacle_MotionType_STOPED = 3
};
bool Obstacle_MotionType_IsValid(int value);
const Obstacle_MotionType Obstacle_MotionType_MotionType_MIN = Obstacle_MotionType_UNKNOW;
const Obstacle_MotionType Obstacle_MotionType_MotionType_MAX = Obstacle_MotionType_STOPED;
const int Obstacle_MotionType_MotionType_ARRAYSIZE = Obstacle_MotionType_MotionType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Obstacle_MotionType_descriptor();
inline const ::std::string& Obstacle_MotionType_Name(Obstacle_MotionType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Obstacle_MotionType_descriptor(), value);
}
inline bool Obstacle_MotionType_Parse(
    const ::std::string& name, Obstacle_MotionType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Obstacle_MotionType>(
    Obstacle_MotionType_descriptor(), name, value);
}
// ===================================================================

class Point3 : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Proto_msg.Point3) */ {
 public:
  Point3();
  virtual ~Point3();

  Point3(const Point3& from);

  inline Point3& operator=(const Point3& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Point3(Point3&& from) noexcept
    : Point3() {
    *this = ::std::move(from);
  }

  inline Point3& operator=(Point3&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Point3& default_instance();

  static inline const Point3* internal_default_instance() {
    return reinterpret_cast<const Point3*>(
               &_Point3_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(Point3* other);
  friend void swap(Point3& a, Point3& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Point3* New() const PROTOBUF_FINAL { return New(NULL); }

  Point3* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Point3& from);
  void MergeFrom(const Point3& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Point3* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float x = 1;
  bool has_x() const;
  void clear_x();
  static const int kXFieldNumber = 1;
  float x() const;
  void set_x(float value);

  // optional float y = 2;
  bool has_y() const;
  void clear_y();
  static const int kYFieldNumber = 2;
  float y() const;
  void set_y(float value);

  // optional float z = 3;
  bool has_z() const;
  void clear_z();
  static const int kZFieldNumber = 3;
  float z() const;
  void set_z(float value);

  // @@protoc_insertion_point(class_scope:Proto_msg.Point3)
 private:
  void set_has_x();
  void clear_has_x();
  void set_has_y();
  void clear_has_y();
  void set_has_z();
  void clear_has_z();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  float x_;
  float y_;
  float z_;
  friend struct protobuf_Proto_5fmsg_2ePercept_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FreeSpace : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Proto_msg.FreeSpace) */ {
 public:
  FreeSpace();
  virtual ~FreeSpace();

  FreeSpace(const FreeSpace& from);

  inline FreeSpace& operator=(const FreeSpace& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FreeSpace(FreeSpace&& from) noexcept
    : FreeSpace() {
    *this = ::std::move(from);
  }

  inline FreeSpace& operator=(FreeSpace&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FreeSpace& default_instance();

  static inline const FreeSpace* internal_default_instance() {
    return reinterpret_cast<const FreeSpace*>(
               &_FreeSpace_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(FreeSpace* other);
  friend void swap(FreeSpace& a, FreeSpace& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FreeSpace* New() const PROTOBUF_FINAL { return New(NULL); }

  FreeSpace* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const FreeSpace& from);
  void MergeFrom(const FreeSpace& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(FreeSpace* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional double timestamp = 1;
  bool has_timestamp() const;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 1;
  double timestamp() const;
  void set_timestamp(double value);

  // optional uint32 device_code = 2;
  bool has_device_code() const;
  void clear_device_code();
  static const int kDeviceCodeFieldNumber = 2;
  ::google::protobuf::uint32 device_code() const;
  void set_device_code(::google::protobuf::uint32 value);

  // optional float distance = 3;
  bool has_distance() const;
  void clear_distance();
  static const int kDistanceFieldNumber = 3;
  float distance() const;
  void set_distance(float value);

  // optional float yaw_angle = 4;
  bool has_yaw_angle() const;
  void clear_yaw_angle();
  static const int kYawAngleFieldNumber = 4;
  float yaw_angle() const;
  void set_yaw_angle(float value);

  // optional float free_prob = 5;
  bool has_free_prob() const;
  void clear_free_prob();
  static const int kFreeProbFieldNumber = 5;
  float free_prob() const;
  void set_free_prob(float value);

  // @@protoc_insertion_point(class_scope:Proto_msg.FreeSpace)
 private:
  void set_has_timestamp();
  void clear_has_timestamp();
  void set_has_device_code();
  void clear_has_device_code();
  void set_has_distance();
  void clear_has_distance();
  void set_has_yaw_angle();
  void clear_has_yaw_angle();
  void set_has_free_prob();
  void clear_has_free_prob();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  double timestamp_;
  ::google::protobuf::uint32 device_code_;
  float distance_;
  float yaw_angle_;
  float free_prob_;
  friend struct protobuf_Proto_5fmsg_2ePercept_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Obstacle : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Proto_msg.Obstacle) */ {
 public:
  Obstacle();
  virtual ~Obstacle();

  Obstacle(const Obstacle& from);

  inline Obstacle& operator=(const Obstacle& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Obstacle(Obstacle&& from) noexcept
    : Obstacle() {
    *this = ::std::move(from);
  }

  inline Obstacle& operator=(Obstacle&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Obstacle& default_instance();

  static inline const Obstacle* internal_default_instance() {
    return reinterpret_cast<const Obstacle*>(
               &_Obstacle_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(Obstacle* other);
  friend void swap(Obstacle& a, Obstacle& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Obstacle* New() const PROTOBUF_FINAL { return New(NULL); }

  Obstacle* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Obstacle& from);
  void MergeFrom(const Obstacle& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Obstacle* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Obstacle_Type Type;
  static const Type UNKNOWN =
    Obstacle_Type_UNKNOWN;
  static const Type PEDESTRIAN =
    Obstacle_Type_PEDESTRIAN;
  static const Type BICYCLE =
    Obstacle_Type_BICYCLE;
  static const Type CAR =
    Obstacle_Type_CAR;
  static const Type TRUCK_BUS =
    Obstacle_Type_TRUCK_BUS;
  static const Type ULTRA_VEHICLE =
    Obstacle_Type_ULTRA_VEHICLE;
  static inline bool Type_IsValid(int value) {
    return Obstacle_Type_IsValid(value);
  }
  static const Type Type_MIN =
    Obstacle_Type_Type_MIN;
  static const Type Type_MAX =
    Obstacle_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    Obstacle_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return Obstacle_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return Obstacle_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return Obstacle_Type_Parse(name, value);
  }

  typedef Obstacle_MotionType MotionType;
  static const MotionType UNKNOW =
    Obstacle_MotionType_UNKNOW;
  static const MotionType MOVING =
    Obstacle_MotionType_MOVING;
  static const MotionType STATIC =
    Obstacle_MotionType_STATIC;
  static const MotionType STOPED =
    Obstacle_MotionType_STOPED;
  static inline bool MotionType_IsValid(int value) {
    return Obstacle_MotionType_IsValid(value);
  }
  static const MotionType MotionType_MIN =
    Obstacle_MotionType_MotionType_MIN;
  static const MotionType MotionType_MAX =
    Obstacle_MotionType_MotionType_MAX;
  static const int MotionType_ARRAYSIZE =
    Obstacle_MotionType_MotionType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MotionType_descriptor() {
    return Obstacle_MotionType_descriptor();
  }
  static inline const ::std::string& MotionType_Name(MotionType value) {
    return Obstacle_MotionType_Name(value);
  }
  static inline bool MotionType_Parse(const ::std::string& name,
      MotionType* value) {
    return Obstacle_MotionType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .Proto_msg.Point3 polygon = 8;
  int polygon_size() const;
  void clear_polygon();
  static const int kPolygonFieldNumber = 8;
  const ::Proto_msg::Point3& polygon(int index) const;
  ::Proto_msg::Point3* mutable_polygon(int index);
  ::Proto_msg::Point3* add_polygon();
  ::google::protobuf::RepeatedPtrField< ::Proto_msg::Point3 >*
      mutable_polygon();
  const ::google::protobuf::RepeatedPtrField< ::Proto_msg::Point3 >&
      polygon() const;

  // repeated float latent_types = 18;
  int latent_types_size() const;
  void clear_latent_types();
  static const int kLatentTypesFieldNumber = 18;
  float latent_types(int index) const;
  void set_latent_types(int index, float value);
  void add_latent_types(float value);
  const ::google::protobuf::RepeatedField< float >&
      latent_types() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_latent_types();

  // repeated float velocity_cov = 23;
  int velocity_cov_size() const;
  void clear_velocity_cov();
  static const int kVelocityCovFieldNumber = 23;
  float velocity_cov(int index) const;
  void set_velocity_cov(int index, float value);
  void add_velocity_cov(float value);
  const ::google::protobuf::RepeatedField< float >&
      velocity_cov() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_velocity_cov();

  // repeated float acceleration_cov = 27;
  int acceleration_cov_size() const;
  void clear_acceleration_cov();
  static const int kAccelerationCovFieldNumber = 27;
  float acceleration_cov(int index) const;
  void set_acceleration_cov(int index, float value);
  void add_acceleration_cov(float value);
  const ::google::protobuf::RepeatedField< float >&
      acceleration_cov() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_acceleration_cov();

  // optional .Proto_msg.Point3 anchor = 4;
  bool has_anchor() const;
  void clear_anchor();
  static const int kAnchorFieldNumber = 4;
  const ::Proto_msg::Point3& anchor() const;
  ::Proto_msg::Point3* mutable_anchor();
  ::Proto_msg::Point3* release_anchor();
  void set_allocated_anchor(::Proto_msg::Point3* anchor);

  // optional .Proto_msg.Point3 geo_center = 5;
  bool has_geo_center() const;
  void clear_geo_center();
  static const int kGeoCenterFieldNumber = 5;
  const ::Proto_msg::Point3& geo_center() const;
  ::Proto_msg::Point3* mutable_geo_center();
  ::Proto_msg::Point3* release_geo_center();
  void set_allocated_geo_center(::Proto_msg::Point3* geo_center);

  // optional .Proto_msg.Point3 geo_size = 6;
  bool has_geo_size() const;
  void clear_geo_size();
  static const int kGeoSizeFieldNumber = 6;
  const ::Proto_msg::Point3& geo_size() const;
  ::Proto_msg::Point3* mutable_geo_size();
  ::Proto_msg::Point3* release_geo_size();
  void set_allocated_geo_size(::Proto_msg::Point3* geo_size);

  // optional .Proto_msg.Point3 geo_direction = 7;
  bool has_geo_direction() const;
  void clear_geo_direction();
  static const int kGeoDirectionFieldNumber = 7;
  const ::Proto_msg::Point3& geo_direction() const;
  ::Proto_msg::Point3* mutable_geo_direction();
  ::Proto_msg::Point3* release_geo_direction();
  void set_allocated_geo_direction(::Proto_msg::Point3* geo_direction);

  // optional .Proto_msg.Point3 nearest_point = 10;
  bool has_nearest_point() const;
  void clear_nearest_point();
  static const int kNearestPointFieldNumber = 10;
  const ::Proto_msg::Point3& nearest_point() const;
  ::Proto_msg::Point3* mutable_nearest_point();
  ::Proto_msg::Point3* release_nearest_point();
  void set_allocated_nearest_point(::Proto_msg::Point3* nearest_point);

  // optional .Proto_msg.Point3 left_point = 11;
  bool has_left_point() const;
  void clear_left_point();
  static const int kLeftPointFieldNumber = 11;
  const ::Proto_msg::Point3& left_point() const;
  ::Proto_msg::Point3* mutable_left_point();
  ::Proto_msg::Point3* release_left_point();
  void set_allocated_left_point(::Proto_msg::Point3* left_point);

  // optional .Proto_msg.Point3 right_point = 12;
  bool has_right_point() const;
  void clear_right_point();
  static const int kRightPointFieldNumber = 12;
  const ::Proto_msg::Point3& right_point() const;
  ::Proto_msg::Point3* mutable_right_point();
  ::Proto_msg::Point3* release_right_point();
  void set_allocated_right_point(::Proto_msg::Point3* right_point);

  // optional .Proto_msg.Point3 velocity = 22;
  bool has_velocity() const;
  void clear_velocity();
  static const int kVelocityFieldNumber = 22;
  const ::Proto_msg::Point3& velocity() const;
  ::Proto_msg::Point3* mutable_velocity();
  ::Proto_msg::Point3* release_velocity();
  void set_allocated_velocity(::Proto_msg::Point3* velocity);

  // optional .Proto_msg.Point3 ave_velocity = 25;
  bool has_ave_velocity() const;
  void clear_ave_velocity();
  static const int kAveVelocityFieldNumber = 25;
  const ::Proto_msg::Point3& ave_velocity() const;
  ::Proto_msg::Point3* mutable_ave_velocity();
  ::Proto_msg::Point3* release_ave_velocity();
  void set_allocated_ave_velocity(::Proto_msg::Point3* ave_velocity);

  // optional .Proto_msg.Point3 acceleration = 26;
  bool has_acceleration() const;
  void clear_acceleration();
  static const int kAccelerationFieldNumber = 26;
  const ::Proto_msg::Point3& acceleration() const;
  ::Proto_msg::Point3* mutable_acceleration();
  ::Proto_msg::Point3* release_acceleration();
  void set_allocated_acceleration(::Proto_msg::Point3* acceleration);

  // optional .Proto_msg.Point3 ave_acceleration = 29;
  bool has_ave_acceleration() const;
  void clear_ave_acceleration();
  static const int kAveAccelerationFieldNumber = 29;
  const ::Proto_msg::Point3& ave_acceleration() const;
  ::Proto_msg::Point3* mutable_ave_acceleration();
  ::Proto_msg::Point3* release_ave_acceleration();
  void set_allocated_ave_acceleration(::Proto_msg::Point3* ave_acceleration);

  // optional double timestamp = 1;
  bool has_timestamp() const;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 1;
  double timestamp() const;
  void set_timestamp(double value);

  // optional uint32 device_code = 2;
  bool has_device_code() const;
  void clear_device_code();
  static const int kDeviceCodeFieldNumber = 2;
  ::google::protobuf::uint32 device_code() const;
  void set_device_code(::google::protobuf::uint32 value);

  // optional int32 id = 3;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 3;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // optional float detect_confidence = 9;
  bool has_detect_confidence() const;
  void clear_detect_confidence();
  static const int kDetectConfidenceFieldNumber = 9;
  float detect_confidence() const;
  void set_detect_confidence(float value);

  // optional float distance = 13;
  bool has_distance() const;
  void clear_distance();
  static const int kDistanceFieldNumber = 13;
  float distance() const;
  void set_distance(float value);

  // optional float yaw = 14;
  bool has_yaw() const;
  void clear_yaw();
  static const int kYawFieldNumber = 14;
  float yaw() const;
  void set_yaw(float value);

  // optional int32 point_num = 15;
  bool has_point_num() const;
  void clear_point_num();
  static const int kPointNumFieldNumber = 15;
  ::google::protobuf::int32 point_num() const;
  void set_point_num(::google::protobuf::int32 value);

  // optional .Proto_msg.Obstacle.Type type = 16;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 16;
  ::Proto_msg::Obstacle_Type type() const;
  void set_type(::Proto_msg::Obstacle_Type value);

  // optional float type_confidence = 17;
  bool has_type_confidence() const;
  void clear_type_confidence();
  static const int kTypeConfidenceFieldNumber = 17;
  float type_confidence() const;
  void set_type_confidence(float value);

  // optional .Proto_msg.Obstacle.MotionType motion_state = 19;
  bool has_motion_state() const;
  void clear_motion_state();
  static const int kMotionStateFieldNumber = 19;
  ::Proto_msg::Obstacle_MotionType motion_state() const;
  void set_motion_state(::Proto_msg::Obstacle_MotionType value);

  // optional bool is_track_converged = 20;
  bool has_is_track_converged() const;
  void clear_is_track_converged();
  static const int kIsTrackConvergedFieldNumber = 20;
  bool is_track_converged() const;
  void set_is_track_converged(bool value);

  // optional int32 tracker_id = 21;
  bool has_tracker_id() const;
  void clear_tracker_id();
  static const int kTrackerIdFieldNumber = 21;
  ::google::protobuf::int32 tracker_id() const;
  void set_tracker_id(::google::protobuf::int32 value);

  // optional float velocity_uncertainty = 24;
  bool has_velocity_uncertainty() const;
  void clear_velocity_uncertainty();
  static const int kVelocityUncertaintyFieldNumber = 24;
  float velocity_uncertainty() const;
  void set_velocity_uncertainty(float value);

  // optional float acceleration_uncertainty = 28;
  bool has_acceleration_uncertainty() const;
  void clear_acceleration_uncertainty();
  static const int kAccelerationUncertaintyFieldNumber = 28;
  float acceleration_uncertainty() const;
  void set_acceleration_uncertainty(float value);

  // optional float angle_velocity = 30;
  bool has_angle_velocity() const;
  void clear_angle_velocity();
  static const int kAngleVelocityFieldNumber = 30;
  float angle_velocity() const;
  void set_angle_velocity(float value);

  // optional float angle_velocity_cov = 31;
  bool has_angle_velocity_cov() const;
  void clear_angle_velocity_cov();
  static const int kAngleVelocityCovFieldNumber = 31;
  float angle_velocity_cov() const;
  void set_angle_velocity_cov(float value);

  // optional float angle_velocity_uncertainty = 32;
  bool has_angle_velocity_uncertainty() const;
  void clear_angle_velocity_uncertainty();
  static const int kAngleVelocityUncertaintyFieldNumber = 32;
  float angle_velocity_uncertainty() const;
  void set_angle_velocity_uncertainty(float value);

  // optional float ave_angle_velocity = 33;
  bool has_ave_angle_velocity() const;
  void clear_ave_angle_velocity();
  static const int kAveAngleVelocityFieldNumber = 33;
  float ave_angle_velocity() const;
  void set_ave_angle_velocity(float value);

  // optional float asso_quality = 34;
  bool has_asso_quality() const;
  void clear_asso_quality();
  static const int kAssoQualityFieldNumber = 34;
  float asso_quality() const;
  void set_asso_quality(float value);

  // optional double tracking_time = 36;
  bool has_tracking_time() const;
  void clear_tracking_time();
  static const int kTrackingTimeFieldNumber = 36;
  double tracking_time() const;
  void set_tracking_time(double value);

  // optional float tracker_quality = 35;
  bool has_tracker_quality() const;
  void clear_tracker_quality();
  static const int kTrackerQualityFieldNumber = 35;
  float tracker_quality() const;
  void set_tracker_quality(float value);

  // @@protoc_insertion_point(class_scope:Proto_msg.Obstacle)
 private:
  void set_has_timestamp();
  void clear_has_timestamp();
  void set_has_device_code();
  void clear_has_device_code();
  void set_has_id();
  void clear_has_id();
  void set_has_anchor();
  void clear_has_anchor();
  void set_has_geo_center();
  void clear_has_geo_center();
  void set_has_geo_size();
  void clear_has_geo_size();
  void set_has_geo_direction();
  void clear_has_geo_direction();
  void set_has_detect_confidence();
  void clear_has_detect_confidence();
  void set_has_nearest_point();
  void clear_has_nearest_point();
  void set_has_left_point();
  void clear_has_left_point();
  void set_has_right_point();
  void clear_has_right_point();
  void set_has_distance();
  void clear_has_distance();
  void set_has_yaw();
  void clear_has_yaw();
  void set_has_point_num();
  void clear_has_point_num();
  void set_has_type();
  void clear_has_type();
  void set_has_type_confidence();
  void clear_has_type_confidence();
  void set_has_motion_state();
  void clear_has_motion_state();
  void set_has_is_track_converged();
  void clear_has_is_track_converged();
  void set_has_tracker_id();
  void clear_has_tracker_id();
  void set_has_velocity();
  void clear_has_velocity();
  void set_has_velocity_uncertainty();
  void clear_has_velocity_uncertainty();
  void set_has_ave_velocity();
  void clear_has_ave_velocity();
  void set_has_acceleration();
  void clear_has_acceleration();
  void set_has_acceleration_uncertainty();
  void clear_has_acceleration_uncertainty();
  void set_has_ave_acceleration();
  void clear_has_ave_acceleration();
  void set_has_angle_velocity();
  void clear_has_angle_velocity();
  void set_has_angle_velocity_cov();
  void clear_has_angle_velocity_cov();
  void set_has_angle_velocity_uncertainty();
  void clear_has_angle_velocity_uncertainty();
  void set_has_ave_angle_velocity();
  void clear_has_ave_angle_velocity();
  void set_has_asso_quality();
  void clear_has_asso_quality();
  void set_has_tracker_quality();
  void clear_has_tracker_quality();
  void set_has_tracking_time();
  void clear_has_tracking_time();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::Proto_msg::Point3 > polygon_;
  ::google::protobuf::RepeatedField< float > latent_types_;
  ::google::protobuf::RepeatedField< float > velocity_cov_;
  ::google::protobuf::RepeatedField< float > acceleration_cov_;
  ::Proto_msg::Point3* anchor_;
  ::Proto_msg::Point3* geo_center_;
  ::Proto_msg::Point3* geo_size_;
  ::Proto_msg::Point3* geo_direction_;
  ::Proto_msg::Point3* nearest_point_;
  ::Proto_msg::Point3* left_point_;
  ::Proto_msg::Point3* right_point_;
  ::Proto_msg::Point3* velocity_;
  ::Proto_msg::Point3* ave_velocity_;
  ::Proto_msg::Point3* acceleration_;
  ::Proto_msg::Point3* ave_acceleration_;
  double timestamp_;
  ::google::protobuf::uint32 device_code_;
  ::google::protobuf::int32 id_;
  float detect_confidence_;
  float distance_;
  float yaw_;
  ::google::protobuf::int32 point_num_;
  int type_;
  float type_confidence_;
  int motion_state_;
  bool is_track_converged_;
  ::google::protobuf::int32 tracker_id_;
  float velocity_uncertainty_;
  float acceleration_uncertainty_;
  float angle_velocity_;
  float angle_velocity_cov_;
  float angle_velocity_uncertainty_;
  float ave_angle_velocity_;
  float asso_quality_;
  double tracking_time_;
  float tracker_quality_;
  friend struct protobuf_Proto_5fmsg_2ePercept_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FreeSpaces : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Proto_msg.FreeSpaces) */ {
 public:
  FreeSpaces();
  virtual ~FreeSpaces();

  FreeSpaces(const FreeSpaces& from);

  inline FreeSpaces& operator=(const FreeSpaces& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FreeSpaces(FreeSpaces&& from) noexcept
    : FreeSpaces() {
    *this = ::std::move(from);
  }

  inline FreeSpaces& operator=(FreeSpaces&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FreeSpaces& default_instance();

  static inline const FreeSpaces* internal_default_instance() {
    return reinterpret_cast<const FreeSpaces*>(
               &_FreeSpaces_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(FreeSpaces* other);
  friend void swap(FreeSpaces& a, FreeSpaces& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FreeSpaces* New() const PROTOBUF_FINAL { return New(NULL); }

  FreeSpaces* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const FreeSpaces& from);
  void MergeFrom(const FreeSpaces& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(FreeSpaces* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Proto_msg.FreeSpace freeSpaces = 5;
  int freespaces_size() const;
  void clear_freespaces();
  static const int kFreeSpacesFieldNumber = 5;
  const ::Proto_msg::FreeSpace& freespaces(int index) const;
  ::Proto_msg::FreeSpace* mutable_freespaces(int index);
  ::Proto_msg::FreeSpace* add_freespaces();
  ::google::protobuf::RepeatedPtrField< ::Proto_msg::FreeSpace >*
      mutable_freespaces();
  const ::google::protobuf::RepeatedPtrField< ::Proto_msg::FreeSpace >&
      freespaces() const;

  // optional string parent_frame_id = 3;
  bool has_parent_frame_id() const;
  void clear_parent_frame_id();
  static const int kParentFrameIdFieldNumber = 3;
  const ::std::string& parent_frame_id() const;
  void set_parent_frame_id(const ::std::string& value);
  #if LANG_CXX11
  void set_parent_frame_id(::std::string&& value);
  #endif
  void set_parent_frame_id(const char* value);
  void set_parent_frame_id(const char* value, size_t size);
  ::std::string* mutable_parent_frame_id();
  ::std::string* release_parent_frame_id();
  void set_allocated_parent_frame_id(::std::string* parent_frame_id);

  // optional string frame_id = 4;
  bool has_frame_id() const;
  void clear_frame_id();
  static const int kFrameIdFieldNumber = 4;
  const ::std::string& frame_id() const;
  void set_frame_id(const ::std::string& value);
  #if LANG_CXX11
  void set_frame_id(::std::string&& value);
  #endif
  void set_frame_id(const char* value);
  void set_frame_id(const char* value, size_t size);
  ::std::string* mutable_frame_id();
  ::std::string* release_frame_id();
  void set_allocated_frame_id(::std::string* frame_id);

  // optional double timestamp = 1;
  bool has_timestamp() const;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 1;
  double timestamp() const;
  void set_timestamp(double value);

  // optional uint32 seq = 2;
  bool has_seq() const;
  void clear_seq();
  static const int kSeqFieldNumber = 2;
  ::google::protobuf::uint32 seq() const;
  void set_seq(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Proto_msg.FreeSpaces)
 private:
  void set_has_timestamp();
  void clear_has_timestamp();
  void set_has_seq();
  void clear_has_seq();
  void set_has_parent_frame_id();
  void clear_has_parent_frame_id();
  void set_has_frame_id();
  void clear_has_frame_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::Proto_msg::FreeSpace > freespaces_;
  ::google::protobuf::internal::ArenaStringPtr parent_frame_id_;
  ::google::protobuf::internal::ArenaStringPtr frame_id_;
  double timestamp_;
  ::google::protobuf::uint32 seq_;
  friend struct protobuf_Proto_5fmsg_2ePercept_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Obstacles : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Proto_msg.Obstacles) */ {
 public:
  Obstacles();
  virtual ~Obstacles();

  Obstacles(const Obstacles& from);

  inline Obstacles& operator=(const Obstacles& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Obstacles(Obstacles&& from) noexcept
    : Obstacles() {
    *this = ::std::move(from);
  }

  inline Obstacles& operator=(Obstacles&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Obstacles& default_instance();

  static inline const Obstacles* internal_default_instance() {
    return reinterpret_cast<const Obstacles*>(
               &_Obstacles_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(Obstacles* other);
  friend void swap(Obstacles& a, Obstacles& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Obstacles* New() const PROTOBUF_FINAL { return New(NULL); }

  Obstacles* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Obstacles& from);
  void MergeFrom(const Obstacles& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Obstacles* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Proto_msg.Obstacle obstacles = 5;
  int obstacles_size() const;
  void clear_obstacles();
  static const int kObstaclesFieldNumber = 5;
  const ::Proto_msg::Obstacle& obstacles(int index) const;
  ::Proto_msg::Obstacle* mutable_obstacles(int index);
  ::Proto_msg::Obstacle* add_obstacles();
  ::google::protobuf::RepeatedPtrField< ::Proto_msg::Obstacle >*
      mutable_obstacles();
  const ::google::protobuf::RepeatedPtrField< ::Proto_msg::Obstacle >&
      obstacles() const;

  // optional string parent_frame_id = 3;
  bool has_parent_frame_id() const;
  void clear_parent_frame_id();
  static const int kParentFrameIdFieldNumber = 3;
  const ::std::string& parent_frame_id() const;
  void set_parent_frame_id(const ::std::string& value);
  #if LANG_CXX11
  void set_parent_frame_id(::std::string&& value);
  #endif
  void set_parent_frame_id(const char* value);
  void set_parent_frame_id(const char* value, size_t size);
  ::std::string* mutable_parent_frame_id();
  ::std::string* release_parent_frame_id();
  void set_allocated_parent_frame_id(::std::string* parent_frame_id);

  // optional string frame_id = 4;
  bool has_frame_id() const;
  void clear_frame_id();
  static const int kFrameIdFieldNumber = 4;
  const ::std::string& frame_id() const;
  void set_frame_id(const ::std::string& value);
  #if LANG_CXX11
  void set_frame_id(::std::string&& value);
  #endif
  void set_frame_id(const char* value);
  void set_frame_id(const char* value, size_t size);
  ::std::string* mutable_frame_id();
  ::std::string* release_frame_id();
  void set_allocated_frame_id(::std::string* frame_id);

  // optional double timestamp = 1;
  bool has_timestamp() const;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 1;
  double timestamp() const;
  void set_timestamp(double value);

  // optional uint32 seq = 2;
  bool has_seq() const;
  void clear_seq();
  static const int kSeqFieldNumber = 2;
  ::google::protobuf::uint32 seq() const;
  void set_seq(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Proto_msg.Obstacles)
 private:
  void set_has_timestamp();
  void clear_has_timestamp();
  void set_has_seq();
  void clear_has_seq();
  void set_has_parent_frame_id();
  void clear_has_parent_frame_id();
  void set_has_frame_id();
  void clear_has_frame_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::Proto_msg::Obstacle > obstacles_;
  ::google::protobuf::internal::ArenaStringPtr parent_frame_id_;
  ::google::protobuf::internal::ArenaStringPtr frame_id_;
  double timestamp_;
  ::google::protobuf::uint32 seq_;
  friend struct protobuf_Proto_5fmsg_2ePercept_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Point3

// optional float x = 1;
inline bool Point3::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Point3::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Point3::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Point3::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline float Point3::x() const {
  // @@protoc_insertion_point(field_get:Proto_msg.Point3.x)
  return x_;
}
inline void Point3::set_x(float value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:Proto_msg.Point3.x)
}

// optional float y = 2;
inline bool Point3::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Point3::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Point3::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Point3::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline float Point3::y() const {
  // @@protoc_insertion_point(field_get:Proto_msg.Point3.y)
  return y_;
}
inline void Point3::set_y(float value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:Proto_msg.Point3.y)
}

// optional float z = 3;
inline bool Point3::has_z() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Point3::set_has_z() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Point3::clear_has_z() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Point3::clear_z() {
  z_ = 0;
  clear_has_z();
}
inline float Point3::z() const {
  // @@protoc_insertion_point(field_get:Proto_msg.Point3.z)
  return z_;
}
inline void Point3::set_z(float value) {
  set_has_z();
  z_ = value;
  // @@protoc_insertion_point(field_set:Proto_msg.Point3.z)
}

// -------------------------------------------------------------------

// FreeSpace

// optional double timestamp = 1;
inline bool FreeSpace::has_timestamp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FreeSpace::set_has_timestamp() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FreeSpace::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FreeSpace::clear_timestamp() {
  timestamp_ = 0;
  clear_has_timestamp();
}
inline double FreeSpace::timestamp() const {
  // @@protoc_insertion_point(field_get:Proto_msg.FreeSpace.timestamp)
  return timestamp_;
}
inline void FreeSpace::set_timestamp(double value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:Proto_msg.FreeSpace.timestamp)
}

// optional uint32 device_code = 2;
inline bool FreeSpace::has_device_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FreeSpace::set_has_device_code() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FreeSpace::clear_has_device_code() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FreeSpace::clear_device_code() {
  device_code_ = 0u;
  clear_has_device_code();
}
inline ::google::protobuf::uint32 FreeSpace::device_code() const {
  // @@protoc_insertion_point(field_get:Proto_msg.FreeSpace.device_code)
  return device_code_;
}
inline void FreeSpace::set_device_code(::google::protobuf::uint32 value) {
  set_has_device_code();
  device_code_ = value;
  // @@protoc_insertion_point(field_set:Proto_msg.FreeSpace.device_code)
}

// optional float distance = 3;
inline bool FreeSpace::has_distance() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FreeSpace::set_has_distance() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FreeSpace::clear_has_distance() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FreeSpace::clear_distance() {
  distance_ = 0;
  clear_has_distance();
}
inline float FreeSpace::distance() const {
  // @@protoc_insertion_point(field_get:Proto_msg.FreeSpace.distance)
  return distance_;
}
inline void FreeSpace::set_distance(float value) {
  set_has_distance();
  distance_ = value;
  // @@protoc_insertion_point(field_set:Proto_msg.FreeSpace.distance)
}

// optional float yaw_angle = 4;
inline bool FreeSpace::has_yaw_angle() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FreeSpace::set_has_yaw_angle() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FreeSpace::clear_has_yaw_angle() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FreeSpace::clear_yaw_angle() {
  yaw_angle_ = 0;
  clear_has_yaw_angle();
}
inline float FreeSpace::yaw_angle() const {
  // @@protoc_insertion_point(field_get:Proto_msg.FreeSpace.yaw_angle)
  return yaw_angle_;
}
inline void FreeSpace::set_yaw_angle(float value) {
  set_has_yaw_angle();
  yaw_angle_ = value;
  // @@protoc_insertion_point(field_set:Proto_msg.FreeSpace.yaw_angle)
}

// optional float free_prob = 5;
inline bool FreeSpace::has_free_prob() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void FreeSpace::set_has_free_prob() {
  _has_bits_[0] |= 0x00000010u;
}
inline void FreeSpace::clear_has_free_prob() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void FreeSpace::clear_free_prob() {
  free_prob_ = 0;
  clear_has_free_prob();
}
inline float FreeSpace::free_prob() const {
  // @@protoc_insertion_point(field_get:Proto_msg.FreeSpace.free_prob)
  return free_prob_;
}
inline void FreeSpace::set_free_prob(float value) {
  set_has_free_prob();
  free_prob_ = value;
  // @@protoc_insertion_point(field_set:Proto_msg.FreeSpace.free_prob)
}

// -------------------------------------------------------------------

// Obstacle

// optional double timestamp = 1;
inline bool Obstacle::has_timestamp() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Obstacle::set_has_timestamp() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Obstacle::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Obstacle::clear_timestamp() {
  timestamp_ = 0;
  clear_has_timestamp();
}
inline double Obstacle::timestamp() const {
  // @@protoc_insertion_point(field_get:Proto_msg.Obstacle.timestamp)
  return timestamp_;
}
inline void Obstacle::set_timestamp(double value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:Proto_msg.Obstacle.timestamp)
}

// optional uint32 device_code = 2;
inline bool Obstacle::has_device_code() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void Obstacle::set_has_device_code() {
  _has_bits_[0] |= 0x00001000u;
}
inline void Obstacle::clear_has_device_code() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void Obstacle::clear_device_code() {
  device_code_ = 0u;
  clear_has_device_code();
}
inline ::google::protobuf::uint32 Obstacle::device_code() const {
  // @@protoc_insertion_point(field_get:Proto_msg.Obstacle.device_code)
  return device_code_;
}
inline void Obstacle::set_device_code(::google::protobuf::uint32 value) {
  set_has_device_code();
  device_code_ = value;
  // @@protoc_insertion_point(field_set:Proto_msg.Obstacle.device_code)
}

// optional int32 id = 3;
inline bool Obstacle::has_id() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void Obstacle::set_has_id() {
  _has_bits_[0] |= 0x00002000u;
}
inline void Obstacle::clear_has_id() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void Obstacle::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 Obstacle::id() const {
  // @@protoc_insertion_point(field_get:Proto_msg.Obstacle.id)
  return id_;
}
inline void Obstacle::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:Proto_msg.Obstacle.id)
}

// optional .Proto_msg.Point3 anchor = 4;
inline bool Obstacle::has_anchor() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Obstacle::set_has_anchor() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Obstacle::clear_has_anchor() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Obstacle::clear_anchor() {
  if (anchor_ != NULL) anchor_->::Proto_msg::Point3::Clear();
  clear_has_anchor();
}
inline const ::Proto_msg::Point3& Obstacle::anchor() const {
  const ::Proto_msg::Point3* p = anchor_;
  // @@protoc_insertion_point(field_get:Proto_msg.Obstacle.anchor)
  return p != NULL ? *p : *reinterpret_cast<const ::Proto_msg::Point3*>(
      &::Proto_msg::_Point3_default_instance_);
}
inline ::Proto_msg::Point3* Obstacle::mutable_anchor() {
  set_has_anchor();
  if (anchor_ == NULL) {
    anchor_ = new ::Proto_msg::Point3;
  }
  // @@protoc_insertion_point(field_mutable:Proto_msg.Obstacle.anchor)
  return anchor_;
}
inline ::Proto_msg::Point3* Obstacle::release_anchor() {
  // @@protoc_insertion_point(field_release:Proto_msg.Obstacle.anchor)
  clear_has_anchor();
  ::Proto_msg::Point3* temp = anchor_;
  anchor_ = NULL;
  return temp;
}
inline void Obstacle::set_allocated_anchor(::Proto_msg::Point3* anchor) {
  delete anchor_;
  anchor_ = anchor;
  if (anchor) {
    set_has_anchor();
  } else {
    clear_has_anchor();
  }
  // @@protoc_insertion_point(field_set_allocated:Proto_msg.Obstacle.anchor)
}

// optional .Proto_msg.Point3 geo_center = 5;
inline bool Obstacle::has_geo_center() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Obstacle::set_has_geo_center() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Obstacle::clear_has_geo_center() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Obstacle::clear_geo_center() {
  if (geo_center_ != NULL) geo_center_->::Proto_msg::Point3::Clear();
  clear_has_geo_center();
}
inline const ::Proto_msg::Point3& Obstacle::geo_center() const {
  const ::Proto_msg::Point3* p = geo_center_;
  // @@protoc_insertion_point(field_get:Proto_msg.Obstacle.geo_center)
  return p != NULL ? *p : *reinterpret_cast<const ::Proto_msg::Point3*>(
      &::Proto_msg::_Point3_default_instance_);
}
inline ::Proto_msg::Point3* Obstacle::mutable_geo_center() {
  set_has_geo_center();
  if (geo_center_ == NULL) {
    geo_center_ = new ::Proto_msg::Point3;
  }
  // @@protoc_insertion_point(field_mutable:Proto_msg.Obstacle.geo_center)
  return geo_center_;
}
inline ::Proto_msg::Point3* Obstacle::release_geo_center() {
  // @@protoc_insertion_point(field_release:Proto_msg.Obstacle.geo_center)
  clear_has_geo_center();
  ::Proto_msg::Point3* temp = geo_center_;
  geo_center_ = NULL;
  return temp;
}
inline void Obstacle::set_allocated_geo_center(::Proto_msg::Point3* geo_center) {
  delete geo_center_;
  geo_center_ = geo_center;
  if (geo_center) {
    set_has_geo_center();
  } else {
    clear_has_geo_center();
  }
  // @@protoc_insertion_point(field_set_allocated:Proto_msg.Obstacle.geo_center)
}

// optional .Proto_msg.Point3 geo_size = 6;
inline bool Obstacle::has_geo_size() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Obstacle::set_has_geo_size() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Obstacle::clear_has_geo_size() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Obstacle::clear_geo_size() {
  if (geo_size_ != NULL) geo_size_->::Proto_msg::Point3::Clear();
  clear_has_geo_size();
}
inline const ::Proto_msg::Point3& Obstacle::geo_size() const {
  const ::Proto_msg::Point3* p = geo_size_;
  // @@protoc_insertion_point(field_get:Proto_msg.Obstacle.geo_size)
  return p != NULL ? *p : *reinterpret_cast<const ::Proto_msg::Point3*>(
      &::Proto_msg::_Point3_default_instance_);
}
inline ::Proto_msg::Point3* Obstacle::mutable_geo_size() {
  set_has_geo_size();
  if (geo_size_ == NULL) {
    geo_size_ = new ::Proto_msg::Point3;
  }
  // @@protoc_insertion_point(field_mutable:Proto_msg.Obstacle.geo_size)
  return geo_size_;
}
inline ::Proto_msg::Point3* Obstacle::release_geo_size() {
  // @@protoc_insertion_point(field_release:Proto_msg.Obstacle.geo_size)
  clear_has_geo_size();
  ::Proto_msg::Point3* temp = geo_size_;
  geo_size_ = NULL;
  return temp;
}
inline void Obstacle::set_allocated_geo_size(::Proto_msg::Point3* geo_size) {
  delete geo_size_;
  geo_size_ = geo_size;
  if (geo_size) {
    set_has_geo_size();
  } else {
    clear_has_geo_size();
  }
  // @@protoc_insertion_point(field_set_allocated:Proto_msg.Obstacle.geo_size)
}

// optional .Proto_msg.Point3 geo_direction = 7;
inline bool Obstacle::has_geo_direction() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Obstacle::set_has_geo_direction() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Obstacle::clear_has_geo_direction() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Obstacle::clear_geo_direction() {
  if (geo_direction_ != NULL) geo_direction_->::Proto_msg::Point3::Clear();
  clear_has_geo_direction();
}
inline const ::Proto_msg::Point3& Obstacle::geo_direction() const {
  const ::Proto_msg::Point3* p = geo_direction_;
  // @@protoc_insertion_point(field_get:Proto_msg.Obstacle.geo_direction)
  return p != NULL ? *p : *reinterpret_cast<const ::Proto_msg::Point3*>(
      &::Proto_msg::_Point3_default_instance_);
}
inline ::Proto_msg::Point3* Obstacle::mutable_geo_direction() {
  set_has_geo_direction();
  if (geo_direction_ == NULL) {
    geo_direction_ = new ::Proto_msg::Point3;
  }
  // @@protoc_insertion_point(field_mutable:Proto_msg.Obstacle.geo_direction)
  return geo_direction_;
}
inline ::Proto_msg::Point3* Obstacle::release_geo_direction() {
  // @@protoc_insertion_point(field_release:Proto_msg.Obstacle.geo_direction)
  clear_has_geo_direction();
  ::Proto_msg::Point3* temp = geo_direction_;
  geo_direction_ = NULL;
  return temp;
}
inline void Obstacle::set_allocated_geo_direction(::Proto_msg::Point3* geo_direction) {
  delete geo_direction_;
  geo_direction_ = geo_direction;
  if (geo_direction) {
    set_has_geo_direction();
  } else {
    clear_has_geo_direction();
  }
  // @@protoc_insertion_point(field_set_allocated:Proto_msg.Obstacle.geo_direction)
}

// repeated .Proto_msg.Point3 polygon = 8;
inline int Obstacle::polygon_size() const {
  return polygon_.size();
}
inline void Obstacle::clear_polygon() {
  polygon_.Clear();
}
inline const ::Proto_msg::Point3& Obstacle::polygon(int index) const {
  // @@protoc_insertion_point(field_get:Proto_msg.Obstacle.polygon)
  return polygon_.Get(index);
}
inline ::Proto_msg::Point3* Obstacle::mutable_polygon(int index) {
  // @@protoc_insertion_point(field_mutable:Proto_msg.Obstacle.polygon)
  return polygon_.Mutable(index);
}
inline ::Proto_msg::Point3* Obstacle::add_polygon() {
  // @@protoc_insertion_point(field_add:Proto_msg.Obstacle.polygon)
  return polygon_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::Proto_msg::Point3 >*
Obstacle::mutable_polygon() {
  // @@protoc_insertion_point(field_mutable_list:Proto_msg.Obstacle.polygon)
  return &polygon_;
}
inline const ::google::protobuf::RepeatedPtrField< ::Proto_msg::Point3 >&
Obstacle::polygon() const {
  // @@protoc_insertion_point(field_list:Proto_msg.Obstacle.polygon)
  return polygon_;
}

// optional float detect_confidence = 9;
inline bool Obstacle::has_detect_confidence() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void Obstacle::set_has_detect_confidence() {
  _has_bits_[0] |= 0x00004000u;
}
inline void Obstacle::clear_has_detect_confidence() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void Obstacle::clear_detect_confidence() {
  detect_confidence_ = 0;
  clear_has_detect_confidence();
}
inline float Obstacle::detect_confidence() const {
  // @@protoc_insertion_point(field_get:Proto_msg.Obstacle.detect_confidence)
  return detect_confidence_;
}
inline void Obstacle::set_detect_confidence(float value) {
  set_has_detect_confidence();
  detect_confidence_ = value;
  // @@protoc_insertion_point(field_set:Proto_msg.Obstacle.detect_confidence)
}

// optional .Proto_msg.Point3 nearest_point = 10;
inline bool Obstacle::has_nearest_point() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Obstacle::set_has_nearest_point() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Obstacle::clear_has_nearest_point() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Obstacle::clear_nearest_point() {
  if (nearest_point_ != NULL) nearest_point_->::Proto_msg::Point3::Clear();
  clear_has_nearest_point();
}
inline const ::Proto_msg::Point3& Obstacle::nearest_point() const {
  const ::Proto_msg::Point3* p = nearest_point_;
  // @@protoc_insertion_point(field_get:Proto_msg.Obstacle.nearest_point)
  return p != NULL ? *p : *reinterpret_cast<const ::Proto_msg::Point3*>(
      &::Proto_msg::_Point3_default_instance_);
}
inline ::Proto_msg::Point3* Obstacle::mutable_nearest_point() {
  set_has_nearest_point();
  if (nearest_point_ == NULL) {
    nearest_point_ = new ::Proto_msg::Point3;
  }
  // @@protoc_insertion_point(field_mutable:Proto_msg.Obstacle.nearest_point)
  return nearest_point_;
}
inline ::Proto_msg::Point3* Obstacle::release_nearest_point() {
  // @@protoc_insertion_point(field_release:Proto_msg.Obstacle.nearest_point)
  clear_has_nearest_point();
  ::Proto_msg::Point3* temp = nearest_point_;
  nearest_point_ = NULL;
  return temp;
}
inline void Obstacle::set_allocated_nearest_point(::Proto_msg::Point3* nearest_point) {
  delete nearest_point_;
  nearest_point_ = nearest_point;
  if (nearest_point) {
    set_has_nearest_point();
  } else {
    clear_has_nearest_point();
  }
  // @@protoc_insertion_point(field_set_allocated:Proto_msg.Obstacle.nearest_point)
}

// optional .Proto_msg.Point3 left_point = 11;
inline bool Obstacle::has_left_point() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Obstacle::set_has_left_point() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Obstacle::clear_has_left_point() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Obstacle::clear_left_point() {
  if (left_point_ != NULL) left_point_->::Proto_msg::Point3::Clear();
  clear_has_left_point();
}
inline const ::Proto_msg::Point3& Obstacle::left_point() const {
  const ::Proto_msg::Point3* p = left_point_;
  // @@protoc_insertion_point(field_get:Proto_msg.Obstacle.left_point)
  return p != NULL ? *p : *reinterpret_cast<const ::Proto_msg::Point3*>(
      &::Proto_msg::_Point3_default_instance_);
}
inline ::Proto_msg::Point3* Obstacle::mutable_left_point() {
  set_has_left_point();
  if (left_point_ == NULL) {
    left_point_ = new ::Proto_msg::Point3;
  }
  // @@protoc_insertion_point(field_mutable:Proto_msg.Obstacle.left_point)
  return left_point_;
}
inline ::Proto_msg::Point3* Obstacle::release_left_point() {
  // @@protoc_insertion_point(field_release:Proto_msg.Obstacle.left_point)
  clear_has_left_point();
  ::Proto_msg::Point3* temp = left_point_;
  left_point_ = NULL;
  return temp;
}
inline void Obstacle::set_allocated_left_point(::Proto_msg::Point3* left_point) {
  delete left_point_;
  left_point_ = left_point;
  if (left_point) {
    set_has_left_point();
  } else {
    clear_has_left_point();
  }
  // @@protoc_insertion_point(field_set_allocated:Proto_msg.Obstacle.left_point)
}

// optional .Proto_msg.Point3 right_point = 12;
inline bool Obstacle::has_right_point() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Obstacle::set_has_right_point() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Obstacle::clear_has_right_point() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Obstacle::clear_right_point() {
  if (right_point_ != NULL) right_point_->::Proto_msg::Point3::Clear();
  clear_has_right_point();
}
inline const ::Proto_msg::Point3& Obstacle::right_point() const {
  const ::Proto_msg::Point3* p = right_point_;
  // @@protoc_insertion_point(field_get:Proto_msg.Obstacle.right_point)
  return p != NULL ? *p : *reinterpret_cast<const ::Proto_msg::Point3*>(
      &::Proto_msg::_Point3_default_instance_);
}
inline ::Proto_msg::Point3* Obstacle::mutable_right_point() {
  set_has_right_point();
  if (right_point_ == NULL) {
    right_point_ = new ::Proto_msg::Point3;
  }
  // @@protoc_insertion_point(field_mutable:Proto_msg.Obstacle.right_point)
  return right_point_;
}
inline ::Proto_msg::Point3* Obstacle::release_right_point() {
  // @@protoc_insertion_point(field_release:Proto_msg.Obstacle.right_point)
  clear_has_right_point();
  ::Proto_msg::Point3* temp = right_point_;
  right_point_ = NULL;
  return temp;
}
inline void Obstacle::set_allocated_right_point(::Proto_msg::Point3* right_point) {
  delete right_point_;
  right_point_ = right_point;
  if (right_point) {
    set_has_right_point();
  } else {
    clear_has_right_point();
  }
  // @@protoc_insertion_point(field_set_allocated:Proto_msg.Obstacle.right_point)
}

// optional float distance = 13;
inline bool Obstacle::has_distance() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void Obstacle::set_has_distance() {
  _has_bits_[0] |= 0x00008000u;
}
inline void Obstacle::clear_has_distance() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void Obstacle::clear_distance() {
  distance_ = 0;
  clear_has_distance();
}
inline float Obstacle::distance() const {
  // @@protoc_insertion_point(field_get:Proto_msg.Obstacle.distance)
  return distance_;
}
inline void Obstacle::set_distance(float value) {
  set_has_distance();
  distance_ = value;
  // @@protoc_insertion_point(field_set:Proto_msg.Obstacle.distance)
}

// optional float yaw = 14;
inline bool Obstacle::has_yaw() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void Obstacle::set_has_yaw() {
  _has_bits_[0] |= 0x00010000u;
}
inline void Obstacle::clear_has_yaw() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void Obstacle::clear_yaw() {
  yaw_ = 0;
  clear_has_yaw();
}
inline float Obstacle::yaw() const {
  // @@protoc_insertion_point(field_get:Proto_msg.Obstacle.yaw)
  return yaw_;
}
inline void Obstacle::set_yaw(float value) {
  set_has_yaw();
  yaw_ = value;
  // @@protoc_insertion_point(field_set:Proto_msg.Obstacle.yaw)
}

// optional int32 point_num = 15;
inline bool Obstacle::has_point_num() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void Obstacle::set_has_point_num() {
  _has_bits_[0] |= 0x00020000u;
}
inline void Obstacle::clear_has_point_num() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void Obstacle::clear_point_num() {
  point_num_ = 0;
  clear_has_point_num();
}
inline ::google::protobuf::int32 Obstacle::point_num() const {
  // @@protoc_insertion_point(field_get:Proto_msg.Obstacle.point_num)
  return point_num_;
}
inline void Obstacle::set_point_num(::google::protobuf::int32 value) {
  set_has_point_num();
  point_num_ = value;
  // @@protoc_insertion_point(field_set:Proto_msg.Obstacle.point_num)
}

// optional .Proto_msg.Obstacle.Type type = 16;
inline bool Obstacle::has_type() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void Obstacle::set_has_type() {
  _has_bits_[0] |= 0x00040000u;
}
inline void Obstacle::clear_has_type() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void Obstacle::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::Proto_msg::Obstacle_Type Obstacle::type() const {
  // @@protoc_insertion_point(field_get:Proto_msg.Obstacle.type)
  return static_cast< ::Proto_msg::Obstacle_Type >(type_);
}
inline void Obstacle::set_type(::Proto_msg::Obstacle_Type value) {
  assert(::Proto_msg::Obstacle_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:Proto_msg.Obstacle.type)
}

// optional float type_confidence = 17;
inline bool Obstacle::has_type_confidence() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void Obstacle::set_has_type_confidence() {
  _has_bits_[0] |= 0x00080000u;
}
inline void Obstacle::clear_has_type_confidence() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void Obstacle::clear_type_confidence() {
  type_confidence_ = 0;
  clear_has_type_confidence();
}
inline float Obstacle::type_confidence() const {
  // @@protoc_insertion_point(field_get:Proto_msg.Obstacle.type_confidence)
  return type_confidence_;
}
inline void Obstacle::set_type_confidence(float value) {
  set_has_type_confidence();
  type_confidence_ = value;
  // @@protoc_insertion_point(field_set:Proto_msg.Obstacle.type_confidence)
}

// repeated float latent_types = 18;
inline int Obstacle::latent_types_size() const {
  return latent_types_.size();
}
inline void Obstacle::clear_latent_types() {
  latent_types_.Clear();
}
inline float Obstacle::latent_types(int index) const {
  // @@protoc_insertion_point(field_get:Proto_msg.Obstacle.latent_types)
  return latent_types_.Get(index);
}
inline void Obstacle::set_latent_types(int index, float value) {
  latent_types_.Set(index, value);
  // @@protoc_insertion_point(field_set:Proto_msg.Obstacle.latent_types)
}
inline void Obstacle::add_latent_types(float value) {
  latent_types_.Add(value);
  // @@protoc_insertion_point(field_add:Proto_msg.Obstacle.latent_types)
}
inline const ::google::protobuf::RepeatedField< float >&
Obstacle::latent_types() const {
  // @@protoc_insertion_point(field_list:Proto_msg.Obstacle.latent_types)
  return latent_types_;
}
inline ::google::protobuf::RepeatedField< float >*
Obstacle::mutable_latent_types() {
  // @@protoc_insertion_point(field_mutable_list:Proto_msg.Obstacle.latent_types)
  return &latent_types_;
}

// optional .Proto_msg.Obstacle.MotionType motion_state = 19;
inline bool Obstacle::has_motion_state() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void Obstacle::set_has_motion_state() {
  _has_bits_[0] |= 0x00100000u;
}
inline void Obstacle::clear_has_motion_state() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void Obstacle::clear_motion_state() {
  motion_state_ = 0;
  clear_has_motion_state();
}
inline ::Proto_msg::Obstacle_MotionType Obstacle::motion_state() const {
  // @@protoc_insertion_point(field_get:Proto_msg.Obstacle.motion_state)
  return static_cast< ::Proto_msg::Obstacle_MotionType >(motion_state_);
}
inline void Obstacle::set_motion_state(::Proto_msg::Obstacle_MotionType value) {
  assert(::Proto_msg::Obstacle_MotionType_IsValid(value));
  set_has_motion_state();
  motion_state_ = value;
  // @@protoc_insertion_point(field_set:Proto_msg.Obstacle.motion_state)
}

// optional bool is_track_converged = 20;
inline bool Obstacle::has_is_track_converged() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void Obstacle::set_has_is_track_converged() {
  _has_bits_[0] |= 0x00200000u;
}
inline void Obstacle::clear_has_is_track_converged() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void Obstacle::clear_is_track_converged() {
  is_track_converged_ = false;
  clear_has_is_track_converged();
}
inline bool Obstacle::is_track_converged() const {
  // @@protoc_insertion_point(field_get:Proto_msg.Obstacle.is_track_converged)
  return is_track_converged_;
}
inline void Obstacle::set_is_track_converged(bool value) {
  set_has_is_track_converged();
  is_track_converged_ = value;
  // @@protoc_insertion_point(field_set:Proto_msg.Obstacle.is_track_converged)
}

// optional int32 tracker_id = 21;
inline bool Obstacle::has_tracker_id() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void Obstacle::set_has_tracker_id() {
  _has_bits_[0] |= 0x00400000u;
}
inline void Obstacle::clear_has_tracker_id() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void Obstacle::clear_tracker_id() {
  tracker_id_ = 0;
  clear_has_tracker_id();
}
inline ::google::protobuf::int32 Obstacle::tracker_id() const {
  // @@protoc_insertion_point(field_get:Proto_msg.Obstacle.tracker_id)
  return tracker_id_;
}
inline void Obstacle::set_tracker_id(::google::protobuf::int32 value) {
  set_has_tracker_id();
  tracker_id_ = value;
  // @@protoc_insertion_point(field_set:Proto_msg.Obstacle.tracker_id)
}

// optional .Proto_msg.Point3 velocity = 22;
inline bool Obstacle::has_velocity() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Obstacle::set_has_velocity() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Obstacle::clear_has_velocity() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Obstacle::clear_velocity() {
  if (velocity_ != NULL) velocity_->::Proto_msg::Point3::Clear();
  clear_has_velocity();
}
inline const ::Proto_msg::Point3& Obstacle::velocity() const {
  const ::Proto_msg::Point3* p = velocity_;
  // @@protoc_insertion_point(field_get:Proto_msg.Obstacle.velocity)
  return p != NULL ? *p : *reinterpret_cast<const ::Proto_msg::Point3*>(
      &::Proto_msg::_Point3_default_instance_);
}
inline ::Proto_msg::Point3* Obstacle::mutable_velocity() {
  set_has_velocity();
  if (velocity_ == NULL) {
    velocity_ = new ::Proto_msg::Point3;
  }
  // @@protoc_insertion_point(field_mutable:Proto_msg.Obstacle.velocity)
  return velocity_;
}
inline ::Proto_msg::Point3* Obstacle::release_velocity() {
  // @@protoc_insertion_point(field_release:Proto_msg.Obstacle.velocity)
  clear_has_velocity();
  ::Proto_msg::Point3* temp = velocity_;
  velocity_ = NULL;
  return temp;
}
inline void Obstacle::set_allocated_velocity(::Proto_msg::Point3* velocity) {
  delete velocity_;
  velocity_ = velocity;
  if (velocity) {
    set_has_velocity();
  } else {
    clear_has_velocity();
  }
  // @@protoc_insertion_point(field_set_allocated:Proto_msg.Obstacle.velocity)
}

// repeated float velocity_cov = 23;
inline int Obstacle::velocity_cov_size() const {
  return velocity_cov_.size();
}
inline void Obstacle::clear_velocity_cov() {
  velocity_cov_.Clear();
}
inline float Obstacle::velocity_cov(int index) const {
  // @@protoc_insertion_point(field_get:Proto_msg.Obstacle.velocity_cov)
  return velocity_cov_.Get(index);
}
inline void Obstacle::set_velocity_cov(int index, float value) {
  velocity_cov_.Set(index, value);
  // @@protoc_insertion_point(field_set:Proto_msg.Obstacle.velocity_cov)
}
inline void Obstacle::add_velocity_cov(float value) {
  velocity_cov_.Add(value);
  // @@protoc_insertion_point(field_add:Proto_msg.Obstacle.velocity_cov)
}
inline const ::google::protobuf::RepeatedField< float >&
Obstacle::velocity_cov() const {
  // @@protoc_insertion_point(field_list:Proto_msg.Obstacle.velocity_cov)
  return velocity_cov_;
}
inline ::google::protobuf::RepeatedField< float >*
Obstacle::mutable_velocity_cov() {
  // @@protoc_insertion_point(field_mutable_list:Proto_msg.Obstacle.velocity_cov)
  return &velocity_cov_;
}

// optional float velocity_uncertainty = 24;
inline bool Obstacle::has_velocity_uncertainty() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void Obstacle::set_has_velocity_uncertainty() {
  _has_bits_[0] |= 0x00800000u;
}
inline void Obstacle::clear_has_velocity_uncertainty() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void Obstacle::clear_velocity_uncertainty() {
  velocity_uncertainty_ = 0;
  clear_has_velocity_uncertainty();
}
inline float Obstacle::velocity_uncertainty() const {
  // @@protoc_insertion_point(field_get:Proto_msg.Obstacle.velocity_uncertainty)
  return velocity_uncertainty_;
}
inline void Obstacle::set_velocity_uncertainty(float value) {
  set_has_velocity_uncertainty();
  velocity_uncertainty_ = value;
  // @@protoc_insertion_point(field_set:Proto_msg.Obstacle.velocity_uncertainty)
}

// optional .Proto_msg.Point3 ave_velocity = 25;
inline bool Obstacle::has_ave_velocity() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Obstacle::set_has_ave_velocity() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Obstacle::clear_has_ave_velocity() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Obstacle::clear_ave_velocity() {
  if (ave_velocity_ != NULL) ave_velocity_->::Proto_msg::Point3::Clear();
  clear_has_ave_velocity();
}
inline const ::Proto_msg::Point3& Obstacle::ave_velocity() const {
  const ::Proto_msg::Point3* p = ave_velocity_;
  // @@protoc_insertion_point(field_get:Proto_msg.Obstacle.ave_velocity)
  return p != NULL ? *p : *reinterpret_cast<const ::Proto_msg::Point3*>(
      &::Proto_msg::_Point3_default_instance_);
}
inline ::Proto_msg::Point3* Obstacle::mutable_ave_velocity() {
  set_has_ave_velocity();
  if (ave_velocity_ == NULL) {
    ave_velocity_ = new ::Proto_msg::Point3;
  }
  // @@protoc_insertion_point(field_mutable:Proto_msg.Obstacle.ave_velocity)
  return ave_velocity_;
}
inline ::Proto_msg::Point3* Obstacle::release_ave_velocity() {
  // @@protoc_insertion_point(field_release:Proto_msg.Obstacle.ave_velocity)
  clear_has_ave_velocity();
  ::Proto_msg::Point3* temp = ave_velocity_;
  ave_velocity_ = NULL;
  return temp;
}
inline void Obstacle::set_allocated_ave_velocity(::Proto_msg::Point3* ave_velocity) {
  delete ave_velocity_;
  ave_velocity_ = ave_velocity;
  if (ave_velocity) {
    set_has_ave_velocity();
  } else {
    clear_has_ave_velocity();
  }
  // @@protoc_insertion_point(field_set_allocated:Proto_msg.Obstacle.ave_velocity)
}

// optional .Proto_msg.Point3 acceleration = 26;
inline bool Obstacle::has_acceleration() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Obstacle::set_has_acceleration() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Obstacle::clear_has_acceleration() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Obstacle::clear_acceleration() {
  if (acceleration_ != NULL) acceleration_->::Proto_msg::Point3::Clear();
  clear_has_acceleration();
}
inline const ::Proto_msg::Point3& Obstacle::acceleration() const {
  const ::Proto_msg::Point3* p = acceleration_;
  // @@protoc_insertion_point(field_get:Proto_msg.Obstacle.acceleration)
  return p != NULL ? *p : *reinterpret_cast<const ::Proto_msg::Point3*>(
      &::Proto_msg::_Point3_default_instance_);
}
inline ::Proto_msg::Point3* Obstacle::mutable_acceleration() {
  set_has_acceleration();
  if (acceleration_ == NULL) {
    acceleration_ = new ::Proto_msg::Point3;
  }
  // @@protoc_insertion_point(field_mutable:Proto_msg.Obstacle.acceleration)
  return acceleration_;
}
inline ::Proto_msg::Point3* Obstacle::release_acceleration() {
  // @@protoc_insertion_point(field_release:Proto_msg.Obstacle.acceleration)
  clear_has_acceleration();
  ::Proto_msg::Point3* temp = acceleration_;
  acceleration_ = NULL;
  return temp;
}
inline void Obstacle::set_allocated_acceleration(::Proto_msg::Point3* acceleration) {
  delete acceleration_;
  acceleration_ = acceleration;
  if (acceleration) {
    set_has_acceleration();
  } else {
    clear_has_acceleration();
  }
  // @@protoc_insertion_point(field_set_allocated:Proto_msg.Obstacle.acceleration)
}

// repeated float acceleration_cov = 27;
inline int Obstacle::acceleration_cov_size() const {
  return acceleration_cov_.size();
}
inline void Obstacle::clear_acceleration_cov() {
  acceleration_cov_.Clear();
}
inline float Obstacle::acceleration_cov(int index) const {
  // @@protoc_insertion_point(field_get:Proto_msg.Obstacle.acceleration_cov)
  return acceleration_cov_.Get(index);
}
inline void Obstacle::set_acceleration_cov(int index, float value) {
  acceleration_cov_.Set(index, value);
  // @@protoc_insertion_point(field_set:Proto_msg.Obstacle.acceleration_cov)
}
inline void Obstacle::add_acceleration_cov(float value) {
  acceleration_cov_.Add(value);
  // @@protoc_insertion_point(field_add:Proto_msg.Obstacle.acceleration_cov)
}
inline const ::google::protobuf::RepeatedField< float >&
Obstacle::acceleration_cov() const {
  // @@protoc_insertion_point(field_list:Proto_msg.Obstacle.acceleration_cov)
  return acceleration_cov_;
}
inline ::google::protobuf::RepeatedField< float >*
Obstacle::mutable_acceleration_cov() {
  // @@protoc_insertion_point(field_mutable_list:Proto_msg.Obstacle.acceleration_cov)
  return &acceleration_cov_;
}

// optional float acceleration_uncertainty = 28;
inline bool Obstacle::has_acceleration_uncertainty() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void Obstacle::set_has_acceleration_uncertainty() {
  _has_bits_[0] |= 0x01000000u;
}
inline void Obstacle::clear_has_acceleration_uncertainty() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void Obstacle::clear_acceleration_uncertainty() {
  acceleration_uncertainty_ = 0;
  clear_has_acceleration_uncertainty();
}
inline float Obstacle::acceleration_uncertainty() const {
  // @@protoc_insertion_point(field_get:Proto_msg.Obstacle.acceleration_uncertainty)
  return acceleration_uncertainty_;
}
inline void Obstacle::set_acceleration_uncertainty(float value) {
  set_has_acceleration_uncertainty();
  acceleration_uncertainty_ = value;
  // @@protoc_insertion_point(field_set:Proto_msg.Obstacle.acceleration_uncertainty)
}

// optional .Proto_msg.Point3 ave_acceleration = 29;
inline bool Obstacle::has_ave_acceleration() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Obstacle::set_has_ave_acceleration() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Obstacle::clear_has_ave_acceleration() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Obstacle::clear_ave_acceleration() {
  if (ave_acceleration_ != NULL) ave_acceleration_->::Proto_msg::Point3::Clear();
  clear_has_ave_acceleration();
}
inline const ::Proto_msg::Point3& Obstacle::ave_acceleration() const {
  const ::Proto_msg::Point3* p = ave_acceleration_;
  // @@protoc_insertion_point(field_get:Proto_msg.Obstacle.ave_acceleration)
  return p != NULL ? *p : *reinterpret_cast<const ::Proto_msg::Point3*>(
      &::Proto_msg::_Point3_default_instance_);
}
inline ::Proto_msg::Point3* Obstacle::mutable_ave_acceleration() {
  set_has_ave_acceleration();
  if (ave_acceleration_ == NULL) {
    ave_acceleration_ = new ::Proto_msg::Point3;
  }
  // @@protoc_insertion_point(field_mutable:Proto_msg.Obstacle.ave_acceleration)
  return ave_acceleration_;
}
inline ::Proto_msg::Point3* Obstacle::release_ave_acceleration() {
  // @@protoc_insertion_point(field_release:Proto_msg.Obstacle.ave_acceleration)
  clear_has_ave_acceleration();
  ::Proto_msg::Point3* temp = ave_acceleration_;
  ave_acceleration_ = NULL;
  return temp;
}
inline void Obstacle::set_allocated_ave_acceleration(::Proto_msg::Point3* ave_acceleration) {
  delete ave_acceleration_;
  ave_acceleration_ = ave_acceleration;
  if (ave_acceleration) {
    set_has_ave_acceleration();
  } else {
    clear_has_ave_acceleration();
  }
  // @@protoc_insertion_point(field_set_allocated:Proto_msg.Obstacle.ave_acceleration)
}

// optional float angle_velocity = 30;
inline bool Obstacle::has_angle_velocity() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void Obstacle::set_has_angle_velocity() {
  _has_bits_[0] |= 0x02000000u;
}
inline void Obstacle::clear_has_angle_velocity() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void Obstacle::clear_angle_velocity() {
  angle_velocity_ = 0;
  clear_has_angle_velocity();
}
inline float Obstacle::angle_velocity() const {
  // @@protoc_insertion_point(field_get:Proto_msg.Obstacle.angle_velocity)
  return angle_velocity_;
}
inline void Obstacle::set_angle_velocity(float value) {
  set_has_angle_velocity();
  angle_velocity_ = value;
  // @@protoc_insertion_point(field_set:Proto_msg.Obstacle.angle_velocity)
}

// optional float angle_velocity_cov = 31;
inline bool Obstacle::has_angle_velocity_cov() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void Obstacle::set_has_angle_velocity_cov() {
  _has_bits_[0] |= 0x04000000u;
}
inline void Obstacle::clear_has_angle_velocity_cov() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void Obstacle::clear_angle_velocity_cov() {
  angle_velocity_cov_ = 0;
  clear_has_angle_velocity_cov();
}
inline float Obstacle::angle_velocity_cov() const {
  // @@protoc_insertion_point(field_get:Proto_msg.Obstacle.angle_velocity_cov)
  return angle_velocity_cov_;
}
inline void Obstacle::set_angle_velocity_cov(float value) {
  set_has_angle_velocity_cov();
  angle_velocity_cov_ = value;
  // @@protoc_insertion_point(field_set:Proto_msg.Obstacle.angle_velocity_cov)
}

// optional float angle_velocity_uncertainty = 32;
inline bool Obstacle::has_angle_velocity_uncertainty() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void Obstacle::set_has_angle_velocity_uncertainty() {
  _has_bits_[0] |= 0x08000000u;
}
inline void Obstacle::clear_has_angle_velocity_uncertainty() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void Obstacle::clear_angle_velocity_uncertainty() {
  angle_velocity_uncertainty_ = 0;
  clear_has_angle_velocity_uncertainty();
}
inline float Obstacle::angle_velocity_uncertainty() const {
  // @@protoc_insertion_point(field_get:Proto_msg.Obstacle.angle_velocity_uncertainty)
  return angle_velocity_uncertainty_;
}
inline void Obstacle::set_angle_velocity_uncertainty(float value) {
  set_has_angle_velocity_uncertainty();
  angle_velocity_uncertainty_ = value;
  // @@protoc_insertion_point(field_set:Proto_msg.Obstacle.angle_velocity_uncertainty)
}

// optional float ave_angle_velocity = 33;
inline bool Obstacle::has_ave_angle_velocity() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void Obstacle::set_has_ave_angle_velocity() {
  _has_bits_[0] |= 0x10000000u;
}
inline void Obstacle::clear_has_ave_angle_velocity() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void Obstacle::clear_ave_angle_velocity() {
  ave_angle_velocity_ = 0;
  clear_has_ave_angle_velocity();
}
inline float Obstacle::ave_angle_velocity() const {
  // @@protoc_insertion_point(field_get:Proto_msg.Obstacle.ave_angle_velocity)
  return ave_angle_velocity_;
}
inline void Obstacle::set_ave_angle_velocity(float value) {
  set_has_ave_angle_velocity();
  ave_angle_velocity_ = value;
  // @@protoc_insertion_point(field_set:Proto_msg.Obstacle.ave_angle_velocity)
}

// optional float asso_quality = 34;
inline bool Obstacle::has_asso_quality() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void Obstacle::set_has_asso_quality() {
  _has_bits_[0] |= 0x20000000u;
}
inline void Obstacle::clear_has_asso_quality() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void Obstacle::clear_asso_quality() {
  asso_quality_ = 0;
  clear_has_asso_quality();
}
inline float Obstacle::asso_quality() const {
  // @@protoc_insertion_point(field_get:Proto_msg.Obstacle.asso_quality)
  return asso_quality_;
}
inline void Obstacle::set_asso_quality(float value) {
  set_has_asso_quality();
  asso_quality_ = value;
  // @@protoc_insertion_point(field_set:Proto_msg.Obstacle.asso_quality)
}

// optional float tracker_quality = 35;
inline bool Obstacle::has_tracker_quality() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
inline void Obstacle::set_has_tracker_quality() {
  _has_bits_[0] |= 0x80000000u;
}
inline void Obstacle::clear_has_tracker_quality() {
  _has_bits_[0] &= ~0x80000000u;
}
inline void Obstacle::clear_tracker_quality() {
  tracker_quality_ = 0;
  clear_has_tracker_quality();
}
inline float Obstacle::tracker_quality() const {
  // @@protoc_insertion_point(field_get:Proto_msg.Obstacle.tracker_quality)
  return tracker_quality_;
}
inline void Obstacle::set_tracker_quality(float value) {
  set_has_tracker_quality();
  tracker_quality_ = value;
  // @@protoc_insertion_point(field_set:Proto_msg.Obstacle.tracker_quality)
}

// optional double tracking_time = 36;
inline bool Obstacle::has_tracking_time() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void Obstacle::set_has_tracking_time() {
  _has_bits_[0] |= 0x40000000u;
}
inline void Obstacle::clear_has_tracking_time() {
  _has_bits_[0] &= ~0x40000000u;
}
inline void Obstacle::clear_tracking_time() {
  tracking_time_ = 0;
  clear_has_tracking_time();
}
inline double Obstacle::tracking_time() const {
  // @@protoc_insertion_point(field_get:Proto_msg.Obstacle.tracking_time)
  return tracking_time_;
}
inline void Obstacle::set_tracking_time(double value) {
  set_has_tracking_time();
  tracking_time_ = value;
  // @@protoc_insertion_point(field_set:Proto_msg.Obstacle.tracking_time)
}

// -------------------------------------------------------------------

// FreeSpaces

// optional double timestamp = 1;
inline bool FreeSpaces::has_timestamp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FreeSpaces::set_has_timestamp() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FreeSpaces::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FreeSpaces::clear_timestamp() {
  timestamp_ = 0;
  clear_has_timestamp();
}
inline double FreeSpaces::timestamp() const {
  // @@protoc_insertion_point(field_get:Proto_msg.FreeSpaces.timestamp)
  return timestamp_;
}
inline void FreeSpaces::set_timestamp(double value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:Proto_msg.FreeSpaces.timestamp)
}

// optional uint32 seq = 2;
inline bool FreeSpaces::has_seq() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FreeSpaces::set_has_seq() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FreeSpaces::clear_has_seq() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FreeSpaces::clear_seq() {
  seq_ = 0u;
  clear_has_seq();
}
inline ::google::protobuf::uint32 FreeSpaces::seq() const {
  // @@protoc_insertion_point(field_get:Proto_msg.FreeSpaces.seq)
  return seq_;
}
inline void FreeSpaces::set_seq(::google::protobuf::uint32 value) {
  set_has_seq();
  seq_ = value;
  // @@protoc_insertion_point(field_set:Proto_msg.FreeSpaces.seq)
}

// optional string parent_frame_id = 3;
inline bool FreeSpaces::has_parent_frame_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FreeSpaces::set_has_parent_frame_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FreeSpaces::clear_has_parent_frame_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FreeSpaces::clear_parent_frame_id() {
  parent_frame_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_parent_frame_id();
}
inline const ::std::string& FreeSpaces::parent_frame_id() const {
  // @@protoc_insertion_point(field_get:Proto_msg.FreeSpaces.parent_frame_id)
  return parent_frame_id_.GetNoArena();
}
inline void FreeSpaces::set_parent_frame_id(const ::std::string& value) {
  set_has_parent_frame_id();
  parent_frame_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Proto_msg.FreeSpaces.parent_frame_id)
}
#if LANG_CXX11
inline void FreeSpaces::set_parent_frame_id(::std::string&& value) {
  set_has_parent_frame_id();
  parent_frame_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Proto_msg.FreeSpaces.parent_frame_id)
}
#endif
inline void FreeSpaces::set_parent_frame_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_parent_frame_id();
  parent_frame_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Proto_msg.FreeSpaces.parent_frame_id)
}
inline void FreeSpaces::set_parent_frame_id(const char* value, size_t size) {
  set_has_parent_frame_id();
  parent_frame_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Proto_msg.FreeSpaces.parent_frame_id)
}
inline ::std::string* FreeSpaces::mutable_parent_frame_id() {
  set_has_parent_frame_id();
  // @@protoc_insertion_point(field_mutable:Proto_msg.FreeSpaces.parent_frame_id)
  return parent_frame_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FreeSpaces::release_parent_frame_id() {
  // @@protoc_insertion_point(field_release:Proto_msg.FreeSpaces.parent_frame_id)
  clear_has_parent_frame_id();
  return parent_frame_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FreeSpaces::set_allocated_parent_frame_id(::std::string* parent_frame_id) {
  if (parent_frame_id != NULL) {
    set_has_parent_frame_id();
  } else {
    clear_has_parent_frame_id();
  }
  parent_frame_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), parent_frame_id);
  // @@protoc_insertion_point(field_set_allocated:Proto_msg.FreeSpaces.parent_frame_id)
}

// optional string frame_id = 4;
inline bool FreeSpaces::has_frame_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FreeSpaces::set_has_frame_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FreeSpaces::clear_has_frame_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FreeSpaces::clear_frame_id() {
  frame_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_frame_id();
}
inline const ::std::string& FreeSpaces::frame_id() const {
  // @@protoc_insertion_point(field_get:Proto_msg.FreeSpaces.frame_id)
  return frame_id_.GetNoArena();
}
inline void FreeSpaces::set_frame_id(const ::std::string& value) {
  set_has_frame_id();
  frame_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Proto_msg.FreeSpaces.frame_id)
}
#if LANG_CXX11
inline void FreeSpaces::set_frame_id(::std::string&& value) {
  set_has_frame_id();
  frame_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Proto_msg.FreeSpaces.frame_id)
}
#endif
inline void FreeSpaces::set_frame_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_frame_id();
  frame_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Proto_msg.FreeSpaces.frame_id)
}
inline void FreeSpaces::set_frame_id(const char* value, size_t size) {
  set_has_frame_id();
  frame_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Proto_msg.FreeSpaces.frame_id)
}
inline ::std::string* FreeSpaces::mutable_frame_id() {
  set_has_frame_id();
  // @@protoc_insertion_point(field_mutable:Proto_msg.FreeSpaces.frame_id)
  return frame_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FreeSpaces::release_frame_id() {
  // @@protoc_insertion_point(field_release:Proto_msg.FreeSpaces.frame_id)
  clear_has_frame_id();
  return frame_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FreeSpaces::set_allocated_frame_id(::std::string* frame_id) {
  if (frame_id != NULL) {
    set_has_frame_id();
  } else {
    clear_has_frame_id();
  }
  frame_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), frame_id);
  // @@protoc_insertion_point(field_set_allocated:Proto_msg.FreeSpaces.frame_id)
}

// repeated .Proto_msg.FreeSpace freeSpaces = 5;
inline int FreeSpaces::freespaces_size() const {
  return freespaces_.size();
}
inline void FreeSpaces::clear_freespaces() {
  freespaces_.Clear();
}
inline const ::Proto_msg::FreeSpace& FreeSpaces::freespaces(int index) const {
  // @@protoc_insertion_point(field_get:Proto_msg.FreeSpaces.freeSpaces)
  return freespaces_.Get(index);
}
inline ::Proto_msg::FreeSpace* FreeSpaces::mutable_freespaces(int index) {
  // @@protoc_insertion_point(field_mutable:Proto_msg.FreeSpaces.freeSpaces)
  return freespaces_.Mutable(index);
}
inline ::Proto_msg::FreeSpace* FreeSpaces::add_freespaces() {
  // @@protoc_insertion_point(field_add:Proto_msg.FreeSpaces.freeSpaces)
  return freespaces_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::Proto_msg::FreeSpace >*
FreeSpaces::mutable_freespaces() {
  // @@protoc_insertion_point(field_mutable_list:Proto_msg.FreeSpaces.freeSpaces)
  return &freespaces_;
}
inline const ::google::protobuf::RepeatedPtrField< ::Proto_msg::FreeSpace >&
FreeSpaces::freespaces() const {
  // @@protoc_insertion_point(field_list:Proto_msg.FreeSpaces.freeSpaces)
  return freespaces_;
}

// -------------------------------------------------------------------

// Obstacles

// optional double timestamp = 1;
inline bool Obstacles::has_timestamp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Obstacles::set_has_timestamp() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Obstacles::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Obstacles::clear_timestamp() {
  timestamp_ = 0;
  clear_has_timestamp();
}
inline double Obstacles::timestamp() const {
  // @@protoc_insertion_point(field_get:Proto_msg.Obstacles.timestamp)
  return timestamp_;
}
inline void Obstacles::set_timestamp(double value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:Proto_msg.Obstacles.timestamp)
}

// optional uint32 seq = 2;
inline bool Obstacles::has_seq() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Obstacles::set_has_seq() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Obstacles::clear_has_seq() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Obstacles::clear_seq() {
  seq_ = 0u;
  clear_has_seq();
}
inline ::google::protobuf::uint32 Obstacles::seq() const {
  // @@protoc_insertion_point(field_get:Proto_msg.Obstacles.seq)
  return seq_;
}
inline void Obstacles::set_seq(::google::protobuf::uint32 value) {
  set_has_seq();
  seq_ = value;
  // @@protoc_insertion_point(field_set:Proto_msg.Obstacles.seq)
}

// optional string parent_frame_id = 3;
inline bool Obstacles::has_parent_frame_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Obstacles::set_has_parent_frame_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Obstacles::clear_has_parent_frame_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Obstacles::clear_parent_frame_id() {
  parent_frame_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_parent_frame_id();
}
inline const ::std::string& Obstacles::parent_frame_id() const {
  // @@protoc_insertion_point(field_get:Proto_msg.Obstacles.parent_frame_id)
  return parent_frame_id_.GetNoArena();
}
inline void Obstacles::set_parent_frame_id(const ::std::string& value) {
  set_has_parent_frame_id();
  parent_frame_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Proto_msg.Obstacles.parent_frame_id)
}
#if LANG_CXX11
inline void Obstacles::set_parent_frame_id(::std::string&& value) {
  set_has_parent_frame_id();
  parent_frame_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Proto_msg.Obstacles.parent_frame_id)
}
#endif
inline void Obstacles::set_parent_frame_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_parent_frame_id();
  parent_frame_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Proto_msg.Obstacles.parent_frame_id)
}
inline void Obstacles::set_parent_frame_id(const char* value, size_t size) {
  set_has_parent_frame_id();
  parent_frame_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Proto_msg.Obstacles.parent_frame_id)
}
inline ::std::string* Obstacles::mutable_parent_frame_id() {
  set_has_parent_frame_id();
  // @@protoc_insertion_point(field_mutable:Proto_msg.Obstacles.parent_frame_id)
  return parent_frame_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Obstacles::release_parent_frame_id() {
  // @@protoc_insertion_point(field_release:Proto_msg.Obstacles.parent_frame_id)
  clear_has_parent_frame_id();
  return parent_frame_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Obstacles::set_allocated_parent_frame_id(::std::string* parent_frame_id) {
  if (parent_frame_id != NULL) {
    set_has_parent_frame_id();
  } else {
    clear_has_parent_frame_id();
  }
  parent_frame_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), parent_frame_id);
  // @@protoc_insertion_point(field_set_allocated:Proto_msg.Obstacles.parent_frame_id)
}

// optional string frame_id = 4;
inline bool Obstacles::has_frame_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Obstacles::set_has_frame_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Obstacles::clear_has_frame_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Obstacles::clear_frame_id() {
  frame_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_frame_id();
}
inline const ::std::string& Obstacles::frame_id() const {
  // @@protoc_insertion_point(field_get:Proto_msg.Obstacles.frame_id)
  return frame_id_.GetNoArena();
}
inline void Obstacles::set_frame_id(const ::std::string& value) {
  set_has_frame_id();
  frame_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Proto_msg.Obstacles.frame_id)
}
#if LANG_CXX11
inline void Obstacles::set_frame_id(::std::string&& value) {
  set_has_frame_id();
  frame_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Proto_msg.Obstacles.frame_id)
}
#endif
inline void Obstacles::set_frame_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_frame_id();
  frame_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Proto_msg.Obstacles.frame_id)
}
inline void Obstacles::set_frame_id(const char* value, size_t size) {
  set_has_frame_id();
  frame_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Proto_msg.Obstacles.frame_id)
}
inline ::std::string* Obstacles::mutable_frame_id() {
  set_has_frame_id();
  // @@protoc_insertion_point(field_mutable:Proto_msg.Obstacles.frame_id)
  return frame_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Obstacles::release_frame_id() {
  // @@protoc_insertion_point(field_release:Proto_msg.Obstacles.frame_id)
  clear_has_frame_id();
  return frame_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Obstacles::set_allocated_frame_id(::std::string* frame_id) {
  if (frame_id != NULL) {
    set_has_frame_id();
  } else {
    clear_has_frame_id();
  }
  frame_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), frame_id);
  // @@protoc_insertion_point(field_set_allocated:Proto_msg.Obstacles.frame_id)
}

// repeated .Proto_msg.Obstacle obstacles = 5;
inline int Obstacles::obstacles_size() const {
  return obstacles_.size();
}
inline void Obstacles::clear_obstacles() {
  obstacles_.Clear();
}
inline const ::Proto_msg::Obstacle& Obstacles::obstacles(int index) const {
  // @@protoc_insertion_point(field_get:Proto_msg.Obstacles.obstacles)
  return obstacles_.Get(index);
}
inline ::Proto_msg::Obstacle* Obstacles::mutable_obstacles(int index) {
  // @@protoc_insertion_point(field_mutable:Proto_msg.Obstacles.obstacles)
  return obstacles_.Mutable(index);
}
inline ::Proto_msg::Obstacle* Obstacles::add_obstacles() {
  // @@protoc_insertion_point(field_add:Proto_msg.Obstacles.obstacles)
  return obstacles_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::Proto_msg::Obstacle >*
Obstacles::mutable_obstacles() {
  // @@protoc_insertion_point(field_mutable_list:Proto_msg.Obstacles.obstacles)
  return &obstacles_;
}
inline const ::google::protobuf::RepeatedPtrField< ::Proto_msg::Obstacle >&
Obstacles::obstacles() const {
  // @@protoc_insertion_point(field_list:Proto_msg.Obstacles.obstacles)
  return obstacles_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace Proto_msg

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::Proto_msg::Obstacle_Type> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Proto_msg::Obstacle_Type>() {
  return ::Proto_msg::Obstacle_Type_descriptor();
}
template <> struct is_proto_enum< ::Proto_msg::Obstacle_MotionType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Proto_msg::Obstacle_MotionType>() {
  return ::Proto_msg::Obstacle_MotionType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Proto_5fmsg_2ePercept_2eproto__INCLUDED
