// Generated by gencpp from file rs_perception/freespace_ros_msg.msg
// DO NOT EDIT!


#ifndef RS_PERCEPTION_MESSAGE_FREESPACE_ROS_MSG_H
#define RS_PERCEPTION_MESSAGE_FREESPACE_ROS_MSG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace rs_perception
{
template <class ContainerAllocator>
struct freespace_ros_msg_
{
  typedef freespace_ros_msg_<ContainerAllocator> Type;

  freespace_ros_msg_()
    : timestamp(0.0)
    , device_code(0)
    , distance(0.0)
    , yaw_angle(0.0)
    , free_prob(0.0)  {
    }
  freespace_ros_msg_(const ContainerAllocator& _alloc)
    : timestamp(0.0)
    , device_code(0)
    , distance(0.0)
    , yaw_angle(0.0)
    , free_prob(0.0)  {
  (void)_alloc;
    }



   typedef double _timestamp_type;
  _timestamp_type timestamp;

   typedef uint32_t _device_code_type;
  _device_code_type device_code;

   typedef float _distance_type;
  _distance_type distance;

   typedef float _yaw_angle_type;
  _yaw_angle_type yaw_angle;

   typedef float _free_prob_type;
  _free_prob_type free_prob;





  typedef boost::shared_ptr< ::rs_perception::freespace_ros_msg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rs_perception::freespace_ros_msg_<ContainerAllocator> const> ConstPtr;

}; // struct freespace_ros_msg_

typedef ::rs_perception::freespace_ros_msg_<std::allocator<void> > freespace_ros_msg;

typedef boost::shared_ptr< ::rs_perception::freespace_ros_msg > freespace_ros_msgPtr;
typedef boost::shared_ptr< ::rs_perception::freespace_ros_msg const> freespace_ros_msgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::rs_perception::freespace_ros_msg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::rs_perception::freespace_ros_msg_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace rs_perception

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'rs_perception': ['/home/wangbin/DEVELOP/rs_ws/src/rs_perception/msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::rs_perception::freespace_ros_msg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rs_perception::freespace_ros_msg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rs_perception::freespace_ros_msg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rs_perception::freespace_ros_msg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rs_perception::freespace_ros_msg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rs_perception::freespace_ros_msg_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::rs_perception::freespace_ros_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "94b71d3aa3ada2b477990194e4301aa3";
  }

  static const char* value(const ::rs_perception::freespace_ros_msg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x94b71d3aa3ada2b4ULL;
  static const uint64_t static_value2 = 0x77990194e4301aa3ULL;
};

template<class ContainerAllocator>
struct DataType< ::rs_perception::freespace_ros_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "rs_perception/freespace_ros_msg";
  }

  static const char* value(const ::rs_perception::freespace_ros_msg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::rs_perception::freespace_ros_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# freespace ros message, organized in polar system with distance to the nearest obstacle that block the way\n\
\n\
# ============basic info============\n\
float64 timestamp # global timestamp in seconds.\n\
uint32 device_code # which device the obstacle is detected by.\n\
\n\
float32 distance\n\
float32 yaw_angle\n\
float32 free_prob\n\
";
  }

  static const char* value(const ::rs_perception::freespace_ros_msg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::rs_perception::freespace_ros_msg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.timestamp);
      stream.next(m.device_code);
      stream.next(m.distance);
      stream.next(m.yaw_angle);
      stream.next(m.free_prob);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct freespace_ros_msg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rs_perception::freespace_ros_msg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::rs_perception::freespace_ros_msg_<ContainerAllocator>& v)
  {
    s << indent << "timestamp: ";
    Printer<double>::stream(s, indent + "  ", v.timestamp);
    s << indent << "device_code: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.device_code);
    s << indent << "distance: ";
    Printer<float>::stream(s, indent + "  ", v.distance);
    s << indent << "yaw_angle: ";
    Printer<float>::stream(s, indent + "  ", v.yaw_angle);
    s << indent << "free_prob: ";
    Printer<float>::stream(s, indent + "  ", v.free_prob);
  }
};

} // namespace message_operations
} // namespace ros

#endif // RS_PERCEPTION_MESSAGE_FREESPACE_ROS_MSG_H
